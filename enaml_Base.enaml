# -*- coding: utf-8 -*-
"""
Created on Sat Dec  6 11:05:58 2014

@author: thomasaref
"""
from LOG_functions import log_debug

from enaml.widgets.api import (RawWidget, Container, Field, Form, SpinBox, GroupBox, Label, Window,
                               ProgressBar, PushButton, CheckBox, MultilineField, ScrollArea, ObjectCombo, Slider)

from enaml.layout.api import hbox, vbox, spacer, align
from enaml.core.api import DynamicTemplate, Looper, d_, Include
from enaml.stdlib.fields import FloatField, IntField
from enaml.application import deferred_call
from threading import Thread
from time import sleep
from numpy import ndarray
from atom.api import observe, Atom, Callable, Tuple, Typed, Dict, List, Float, Int, Unicode, Enum, Bool, Str, ContainerList, Range, FloatRange, Instance, Event
from Atom_Base import Base
from Atom_Instrument import Instrument
#from enaml_Filer import ReadWrap, SaveWrap
#from Atom_Read_File import Read_File
#from Atom_Save_File import Save_File
#from EBL_enaml import EBContWrap
#from EBL_Polyer import Polyer

from testtemp import TypedView, get_tag

#def get_tag(name, model, tag, none_value=None):
#    return model.get_tag(name, tag, none_value)
    
template ValView(name, model, modelType):
    """ This default specialization displays read-only text for the value."""
    Field:
        read_only = True
        text << unicode(getattr(model, name))
        
template ValView(name, model, modelType: Typed):
    TypedView(name, model, type(getattr(model, name))):
        pass

template ValView(name, model, modelType: Instance):
    TypedView(name, model, type(getattr(model, name))):
        pass

#from enaml.stdlib.slider_transform import FloatTransform

template ValView(name, model, modelType: Float):
    """ A form control template specialization for Float members"""
    FloatField:
        value :=  getattr(model, name)
        minimum=model.get_tag(name, 'low')
        maximum=model.get_tag(name, 'high')

template ValView(name, model, modelType: Range):
    """ A form control template specialization for Float members"""
    Container:
        constraints=[hbox(sel, min_lbl, sel_slider, max_lbl)]
        SpinBox: sel:
            value:=getattr(model, name)
            minimum = sel_slider.minimum
            maximum = sel_slider.maximum
        Slider: sel_slider:
            minimum = model.get_member(name).validate_mode[1][0]
            maximum = model.get_member(name).validate_mode[1][1]
            value :=getattr(model, name)
            tracking = False
        Label: min_lbl:
                text << str(sel_slider.minimum)
        Label: max_lbl:
            text << str(sel_slider.maximum)

#template ValView(name, model, modelType: FloatRange):
#    """ A form control template specialization for Float members"""
#    Container:
#        constraints=[hbox(sel, min_lbl, sel_slider, max_lbl)]
#        FloatField: sel:
#            value:=getattr(model, name)
#            minimum = ft.minimum
#            maximum = ft.maximum
#        Slider: sel_slider:
#            tracking = False
#            FloatTransform: ft:
#                minimum=model.get_tag(name, 'low')
#                maximum=model.get_tag(name, 'high')
#                value :=getattr(model, name)
#                precision=model.get_tag(name, 'precision', 100)
#        Label: min_lbl:
#                text << str(ft.minimum)
#        Label: max_lbl:
#            text << str(ft.maximum)

template ValView(name, model, modelType: Int):
    """ A form control template specialization for Int members using a spin box"""
    SpinBox:
        value := getattr(model, name)
        minimum=int(model.get_tag(name, 'low', -2147483648))
        maximum=int(model.get_tag(name, 'high', 2147483647))


template ValView(name, model, modelType: Str):
    """ A template specialization for Unicode using a MultilineField"""
    MultilineField: mlf:
            text := getattr(model, name)

template ValView(name, model, modelType: Unicode):
    """A template specialization for Unicode using a field"""
    Field:
        text := getattr(model, name)

template ValView(name, model, modelType: Callable):
    """A template specialization for Unicode using a field"""
    Container:
        padding = 0
        constraints = [hbox(pb1, gb1), align('top', pb1, gb1)]
        PushButton: pb1:
            text = 'Run'
            clicked :: getattr(instr, name)(instr) #do_it_if_needed(var, "receive") #receive()
            #enabled << not instr.busy
        GroupBox: gb1:
            padding = 0
            visible = getattr(model, name).run_params!=[]
            title = instr.get_tag(name, 'label', name)+" parameters:"
            Looper: get_loop:
                    iterable << getattr(model, name).run_params
                    DynamicTemplate:
                        base=VarTemp #text = '{0} {1}'.format(loop_index, loop_item)
                        args=(loop_item, instr, type(instr))

#def get_mapped_value(model, name):
#    mp=model.get_map(name)

template ValView(name, model, modelType: Enum):
    """ A form control template specialization for Enum members using ObjectCombo."""
    Container:
        padding = 0
        constraints = [ hbox(val, enm_val)]
        ObjectCombo: val:
            items = list(model.get_member(name).items)
            selected := getattr(model, name)
            selected :: enm_val.text=unicode(model.get_map(name))
        Label: enm_val:
            text =  unicode(model.get_map(name))# tag(name, 'mapping', {getattr(model, name):getattr(model, name)})[getattr(model, name)])

template ValView(name, model, modelType: Bool):
    """ A form control template specialization for Bool members using CheckBox"""
    CheckBox:
        checked := getattr(model, name)

template CLView(name, model, index, vtype: Base):
    AutoFormWrap:
        instr:=getattr(model, name)[index]

template CLView(name, model, index, vtype):
    MultilineField:
        read_only=True
        text<<unicode(getattr(model, name))

#template CLView(name, model, index, vtype: "EMPTY"):
#    pass

template CLView(name, model, index, vtype: float):
    FloatField:
        value:=getattr(model, name)[index]

template CLView(name, model, index, vtype: int):
    IntField:
        value:=getattr(model, name)[index]

template CLView(name, model, index, vtype: str):
    """ A template specialization for Unicode using a MultilineField"""
    MultilineField: mlf:
            text := getattr(model, name)[index]

#template CLView(name, model, index, vtype: list):
#        GroupBox:
#            padding = 0
            #visible << getattr(model, name)!=[]
            #title = instr.get_tag(name, 'label', name)+" variables:"
            #Looper:
            #        iterable << getattr(model, name) #model.return_vars
           #         DynamicTemplate:
           #             base=VarTemp #text = '{0} {1}'.format(loop_index, loop_item)
           #             args=(loop_item, model, type(model))

template CLView(name, model, index, vtype: unicode):
    """A template specialization for Unicode using a field"""
    Field:
        text := getattr(model, name)[index]

template ClView(name, model, index, vtype: bool):
    """ A form control template specialization for Bool members using CheckBox"""
    CheckBox:
        checked := getattr(model, name)[index]

def get_type(name, model, index):
    if index<len(getattr(model, name)):
        print type(getattr(model, name)[index]), model.get_tag(name, "inside_type")
        return model.get_tag(name, "inside_type", type(getattr(model, name)[index]))
    return None

template ValView(name, model, modelType: ContainerList):
    Container:
        padding=0
        constraints = [hbox(ind, val, insert_btn, pop_btn), ind.width==100]
        SpinBox: ind:
            minimum=0
            maximum << max(0, len(getattr(model, name))-1)
        Container: val:
            padding = 0
            DynamicTemplate: dyn:
                base = CLView
                args << (name, model, ind.value, get_type(name, model, ind.value))
        PushButton: insert_btn:
            text="Insert"
            clicked::
                if len(getattr(model, name))==0:
                    intype=model.get_tag(name, 'inside_type')() #if inside_type is not specified for an empty array, this will generate an error
                else:
                    temptype=getattr(model, name)[ind.value]
                    if isinstance(temptype, Base):
                        intype=temptype.copy()
                    else:
                        intype=type(temptype)()
                getattr(model, name).insert(ind.value, intype) #pass #mydata.insert()
            #visible << model.get_tag(name, "full_interface", False)
        PushButton: pop_btn:
            text="Remove"
            clicked:: getattr(model, name).pop(ind.value)
            #visible << model.get_tag(name, "full_interface", False)
            enabled << len(getattr(model, name))>0

template ValView(name, model, modelType: List):
        GroupBox:
            padding = 0
            visible << getattr(model, name)!=[]
            title = instr.get_tag(name, 'label', name)+" variables:"
            Looper:
                    iterable << getattr(model, name) #model.return_vars
                    DynamicTemplate:
                        base=VarTemp #text = '{0} {1}'.format(loop_index, loop_item)
                        args=(loop_item, model, type(model))

enamldef BootClose(Container):
    Container:
        padding = 0
        GroupBox:
            #constraints=[hbox(boot, close, active, boot_params, close_params, spacer, pt)]
            Container:
                padding = 0
                constraints = [hbox(lbs, fds, spacer)]
                Label: lbs:
                    text = "Instrument {instr} status:".format(instr=instr.name)
                Field: fds:
                    read_only=True
                    text << instr.status
            Container: boot:
                padding = 0
                constraints = [hbox(pbb, gbb, spacer), align('top', pbb, gbb)]
                PushButton: pbb:
                    clicked :: instr.boot()
                    text = "Boot"
                GroupBox: gbb:
                    padding = 0
                    visible = instr.booter.run_params!=[]
                    title = "Boot parameters:"
                    Looper: boot_loop:
                        iterable << instr.booter.run_params
                        DynamicTemplate:
                            base=VarTemp #text = '{0} {1}'.format(loop_index, loop_item)
                            args=(loop_item, instr, type(instr))
            Container: close:
                padding = 0
                constraints = [hbox(pbc, gbc, spacer), align('top', pbc, gbc)]
                PushButton: pbc:
                    clicked :: instr.close()
                    text = "Close"
                GroupBox: gbc:
                    padding = 0
                    visible = instr.closer.run_params!=[]
                    title = "Close parameters:"
                    Looper: close_loop:
                        iterable << instr.closer.run_params
                        DynamicTemplate:
                            base=VarTemp #text = '{0} {1}'.format(loop_index, loop_item)
                            args=(loop_item, instr, type(instr))

            Container: pt:
                padding = 0
                constraints=[hbox(plt, pltx, spacer)]
                Label:plt:
                    text = "Plot x-axis: "
                ObjectCombo: pltx:
                    items = instr.all_params
                    selected := instr.plot_x

def constraints_gen(name, model, lbl, val, unt, contents_width, contents_top, contents_left):
    if type(get_tag(name, model, "width", 0))!=int:
        return [hbox(lbl, val, unt)]
    else:
        return [hbox(lbl, val, unt, spacer), val.width>=get_tag(name, model, 'width', contents_width/5),
                align('bottom', val, unt), align('bottom', lbl, val)]
                 #contents_top == val.top, contents_left == lbl.left,]

def get_type(base, name):
    """returns type of parameter with given name"""
    typer=type(base.get_member(name))
    #if typer in (Coerced, Instance):
    #        typer=type(getattr(self, name))
    return get_tag(name, base, "type", typer)

template VarTemp(name, instr, InstrType: Atom):
    GroupBox:
        flat = True
        padding=0
        constraints = constraints_gen(name, instr, lbl, val, unt, contents_width, contents_top, contents_left) #[hbox( lbl, val, unt),#,
        #               align('top', val, unt), align('top', lbl, val),
        #                  align('left', gbcontents, 80, val) | 'medium']#, width == contents_width, height==contents_height]
                        #contents_top == lbl.top, contents_left == lbl.left]#, contents_right == set_params.right,
#                         (lbl.bottom == contents_bottom) | 'medium']
        Label: lbl:
            text = get_tag(name, instr, 'label', name)
        Container: val:
            padding = 0
            DynamicTemplate: dyn:
                base = TypedView
                args = (name, instr, get_type(instr,name))
        Label: unt:
            text = get_tag(name, instr, 'unit', "")
            visible = get_tag(name, instr, 'unit')!=None

template VarTemp(name, instr, InstrType: Base):
#enamldef BaseBox(GroupBox):
    GroupBox:
        flat = True
        padding=0
        constraints = constraints_gen(name, instr, lbl, val, unt, contents_width, contents_top, contents_left) #[hbox( lbl, val, unt),#,
        #               align('top', val, unt), align('top', lbl, val),
        #                  align('left', gbcontents, 80, val) | 'medium']#, width == contents_width, height==contents_height]
                        #contents_top == lbl.top, contents_left == lbl.left]#, contents_right == set_params.right,
#                         (lbl.bottom == contents_bottom) | 'medium']
        Label: lbl:
            text = instr.get_tag(name, 'label', name)
        Container: val:
            padding = 0
            DynamicTemplate: dyn:
                base = ValView
                args = (name, instr, instr.get_type(name))
        Label: unt:
            text = instr.get_tag(name, 'unit', "")
            visible = instr.get_tag(name, 'unit')!=None

#template VarTemp(name, instr, InstrType: Base):
#    BaseBox:
#        pass

template VarTemp(name, instr, InstrType: Instrument):
    GroupBox: contents:
        flat = True
        padding=0
        constraints = [
                        hbox( lbl, val, unt, snd_now, snd, rec, set_params, get_params, spacer),#,
                       align('top', val, rec), align('top', val, unt), align('top', lbl, val),
                         align('top', val, set_params), align('top', set_params, get_params),
                         align('left', contents, 280, rec) | 'medium', align('left', contents, 80, val) | 'medium']
        #                width == contents_width, height==contents_height]
                        #contents_top == lbl.top, contents_left == lbl.left]#, contents_right == set_params.right,
#                         (lbl.bottom == contents_bottom) | 'medium']
        Label: lbl:
            text = instr.get_tag(name, 'label', name)
        Container: val:
            padding = 0
            DynamicTemplate: dyn:
                base = ValView
                args = (name, instr, instr.get_type(name))
        Label: unt:
            text = instr.get_tag(name, 'unit', "")
            visible = instr.get_tag(name, 'unit')!=None
        GroupBox: get_params:
            padding = 0
            visible = instr.get_run_params(name, 'get_cmd')!=[]
            title = instr.get_tag(name, 'label', name)+" get parameters:"
            Looper: get_loop:
                    iterable << instr.get_run_params(name, 'get_cmd', notself=True)
                    DynamicTemplate:
                        base=VarTemp #text = '{0} {1}'.format(loop_index, loop_item)
                        args=(loop_item, instr, type(instr))

        GroupBox: set_params:
            #hug_height='strong'
            padding = 0
            visible = instr.get_run_params(name, 'set_cmd')!=[]
            title = instr.get_tag(name, 'label', name)+" set parameters:"
            Looper: set_loop:
                    iterable << instr.get_run_params(name, 'set_cmd', notself=True)
                    DynamicTemplate:
                        base=VarTemp #text = '{0} {1}'.format(loop_index, loop_item)
                        args=(loop_item, instr, type(instr))

        CheckBox: snd_now:
            text = 'Send on change'
            checked = instr.get_tag(name, 'send_now', instr.send_now)
            toggled :: instr.set_tag(name, send_now=snd_now.checked)
            visible << (instr.get_tag(name, 'get_cmd')!=None or instr.get_tag(name, 'set_cmd')!=None) and instr.get_tag(name, 'full_interface', instr.full_interface)
        PushButton: snd:
            text = 'Send'
            clicked :: instr.send(name) #sender(var, val)
            enabled << instr.get_tag(name, 'set_cmd')!=None and not instr.busy
            visible << (instr.get_tag(name, 'get_cmd')!=None or instr.get_tag(name, 'set_cmd')!=None) and instr.get_tag(name, 'full_interface', instr.full_interface)
        PushButton: rec:
            text = 'Receive'
            clicked :: instr.receive(name) #do_it_if_needed(var, "receive") #receive()
            enabled << instr.get_tag(name, 'get_cmd')!=None and not instr.busy
            visible = instr.get_tag(name,'get_cmd')!=None or instr.get_tag(name, 'set_cmd')!=None



def form_spec(instr):
    """ Generate a form specification for an instrument type."""
    try:
        items = []
        for name in instr.main_params:
            items.append((name, instr, type(instr)))
        return tuple(items)
    except AttributeError:
        return tuple([(name, instr, type(instr)) for name in instr.members()])

template ForEach(Spec, Item):
    """ A templated loop which maps a template over a sequence."""
    ForEach(Spec[:-1], Item):
        pass
    Item(*Spec[-1]):
        pass

template ForEach(Spec: (), Item):
    """ The terminating condition for the templated loop."""
    pass

template AutoFormBody(Instr):
    """ A template which builds the body for an AutoForm."""
    const Spec = form_spec(Instr)
    ForEach(Spec, VarTemp):
            pass

template AutoFormBody(Instr: type(None)):
    """ A template specialization for null models (terminating condition)."""
    pass

enamldef AutoForm(Container):
    """ A Form which automatically generates its body from a model."""
    padding = 0
    DynamicTemplate:
        base = AutoFormBody
        args = (instr,)


enamldef AutoBaseCont(Container):
        padding = 0
        constraints = [width == contents_width, height==contents_height]
        ScrollArea:
            constraints = [width == contents_width, height==contents_height]
            Container:
                padding = 0
                AutoForm: var1:
                    pass

enamldef AutoFormWrap(AutoBaseCont):
    attr instr


enamldef AutoInstrCont(Container):
        padding = 0
        constraints = [width == contents_width, height==contents_height]
        ScrollArea:
            constraints = [width == contents_width, height==contents_height]
            Container:
                padding = 0
                BootClose: boot:
                    pass
                AutoForm: var1:
                    pass

enamldef AutoInstrView(Window): main:
    attr instr
    title = "Instrument: {0}".format(instr.name)
    AutoInstrCont:
        pass

enamldef VarCont(Container):
    padding = 0
    attr varname
    DynamicTemplate:
        base = VarTemp
        args = (varname, instr)

enamldef InstrView(Window): main:
    attr instr
    title = "Instrument: {0}".format(instr.name)
    Container: cont:
        padding = 0
        constraints = [width == 800, height==500]
        ScrollArea:
            constraints = [width == contents_width, height==contents_height]
            Container:
                padding = 0
                BootClose: boot:
                    pass
                VarCont: #VarTemp('voltage', instr): var1:
                    varname='voltage'
                VarCont:
                    varname='power'
               # LogForm: log:
               #     boss := instr.boss