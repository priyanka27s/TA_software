# -*- coding: utf-8 -*-
"""
Created on Tue Jul  7 21:28:45 2015

@author: thomasaref
"""

from enaml.widgets.api import MainWindow, Container, DockArea, DockItem,  Field, ScrollArea, MultilineField, Window, VGroup, Label
from enaml.core.api import DynamicTemplate, Looper, Conditional
from enaml.layout.api import TabLayout, spacer
from atom.api import Unicode, Str, Float, Int, Atom, ContainerList
from a_Backbone import get_main_params, get_type, get_tag, get_attr, set_tag
from TA_Fundamentals import cap_case
from e_FundView import Var, IntVar, FloatVar, UnicodeVar, ListVar, aHGroup, TypedView, spacer_eval#UnitFloatField, UnitSpinBox, ChoiceField



                
template InstrView(instrType):
    VGroup:
        padding = 0
        Looper:
            iterable<<get_main_params(instr)
            aHGroup:
                trailing_spacer=spacer_eval(instr, loop_item)
                func update_vval():
                    pass
                Label:
                    text=get_tag(instr, loop_item, "label", loop_item)
                DynamicTemplate: s:
                    base = TypedView
                    args << (type(getattr(instr, loop_item)),)
                    data << dict(vmodel=instr, vname=loop_item, vvalue=getattr(instr, loop_item))



class testmodel(object):
    a=4
    b=3.2
    c="blah"
    d=[0, 1, 2,3,4,5,5,6,7,7,8,88,4,8,9,5,8,8,8]
    
b=testmodel()
set_tag(b, "a",  show_value=True, unit_factor=10, unit="MHz")
set_tag(b, "b",  show_value=True, unit_factor=0.1, unit="Hz", label="float test", no_spacer=True)
set_tag(b, "d",  show_value=True, unit_factor=2, unit="Hz", label="listy", no_spacer=True)

#set_tag(b, "c",  spec="multiline")

class testAtom(Atom):
    a=Int(4).tag(show_value=True, unit_factor=10, unit="MHz")
    b=Float(3.2).tag(show_value=True, unit_factor=0.1, unit="Hz", label="float test", no_spacer=True)
    c=Unicode("blah").tag(spec="multiline")
    d=ContainerList(default=[1,2,3, 3.4])
b=testAtom()    

enamldef Main(Window):
    attr instr = b
    InstrView(None):
        pass

template BaseTemp(bview):
    Container:
        padding = 0
        ScrollArea:
            Container:
                padding = 0
                DynamicTemplate:
                    base = InstrView
                    args = (type(instr),)
                    #data = dict(visible=True)

#How to implement custom layouts. OtherCont could be imported from another file, i.e. from yourfile.enaml import OtherCont
enamldef OtherCont(Container):
    Field:
        text:=instr.b

template BaseTemp(bview: "field"):
    OtherCont:
        pass  

enamldef InstrDockItem(DockItem):
   attr instr
   name = get_attr(instr, "name", "noitem")
   title = cap_case(name)
   DynamicTemplate:
       base = BaseTemp
       args=(get_attr(instr, "view", "Auto"), ) 

enamldef AtomMain(MainWindow): main:
    attr elect 
    title=get_attr(main.elect, "name", "No Title")
    #activated :: main.send_to_front()
    alias bossarea
    Container: mycont:
        alias bossarea
        DockArea: bossarea:
            layout=TabLayout(di.name)
            InstrDockItem: di:
                instr=elect
                
