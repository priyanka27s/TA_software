# -*- coding: utf-8 -*-
"""
Created on Sat Dec 27 18:19:37 2014

@author: thomasaref
"""
from enaml.core.api import Include, Looper, DynamicTemplate
from enaml.layout.api import vbox, hbox, align, spacer, TabLayout, InsertItem,  InsertTab, HSplitLayout
from enaml.widgets.api import (
    MainWindow,  Container, PushButton, Field, CheckBox, ObjectCombo, Form, DockArea, DockItem, Slider,
    StatusBar, StatusItem, Label, DockPane, MultilineField, Window, ToolBar, Action, ActionGroup, FileDialogEx, GroupBox
)

from enaml_Base import AutoBaseCont
template BaseTemp(BaseView):
    AutoBaseCont:
        pass

from enaml_Plotter import PlotAreaContainer as PlotContainer
from enaml_Filer import SaveWrap, ReadWrap, ReadSaveWrap
from TA_Fundamentals import cap_case
from atom.api import Atom, Str, Instance, Event

enamldef BossToolBar(ToolBar):
    dock_area='left'
    Action:
        text="Log"
        triggered::
            logpane.show()
        tool_tip = "Show log"
    Action:
        text="Save"
        triggered::
            savepane.show()
        tool_tip = "Show save pane"
#    Action:
#        text="Read"
#        triggered::
#            if savepane.visible:
#                savepane.hide()
#            readpane.show()
            #print dir(savepane) #boss.run #readpane.show()
#        tool_tip = "Show read pane"
    Action:
        text = "Plot"
        triggered:: plotpane.show() #print dir(bossarea) #show_plot(bossarea, boss.plot) #show_pane(dyn_pages, 'Plot')
        tool_tip = "Show plot"
    Action:
        separator=True
    Action:
        separator=True

    Action: run:
        text = "Run"
        triggered :: boss.run()
    Action:
        separator=True
    Action:
        separator=True

    Action:
        text = "Bases"
        triggered::
             show_all_bases(bossarea, boss)
        tool_tip = "Show all bases"
    Action:
        separator=True
    Looper: loopy:
        iterable := boss.bases
        Action:
            text = loop_item.name
            tool_tip = "Show base: {0}".format(loop_item.name)
            triggered:: show_base(bossarea, loop_item)#show_instrument(dyn_pages, loop_item)

def get_plot_items(inlist):
    if inlist==None:
        return []
    return inlist


enamldef PlotBox(GroupBox):
#    attr xkey=boss.plottables.keys()[0]
#    attr ykey=boss.plottables.keys()[0]
#    attr xkey=boss.plottables.keys()[0]
#    attr ykey=boss.plottables.keys()[0]

    Container:
        constraints = [vbox(hbox(xinstr_lbl, xinstr, xvar_lbl, xvar), hbox(yinstr_lbl, yinstr, yvar_lbl, yvar))]
        Label: xinstr_lbl:
            text="X instr"
        ObjectCombo: xinstr:
            items = list(boss.plottables.keys())

        Label: yinstr_lbl:
            text="Y instr"
        ObjectCombo: yinstr:
            items = list(boss.plottables.keys())
#            selected := ykey

        Label: yvar_lbl:
            text="Y var"
        ObjectCombo: yvar:
            items = boss.plottables[yinstr.selected]

        Label: xvar_lbl:
            text="X var"
        ObjectCombo: xvar:
            items = boss.plottables[xinstr.selected]

#class LOG(Atom):
#    logstr=Str()
#    old_sys_stdout=Instance(type(sys.stdout))

#    def write(self, str):
#        logstr+=str

#import sys
#class WriteDockPane(DockPane):
#    #def _observe_visible(self, change):
#    #    print change
#    def write(self,str):
#        self.logstr+=str
#
#    def redirect_stdout(self):
#        if self.visible:
#            sys.stdout=self
#            sys.stderr=self
#        else:
#            sys.stdout=self.old_stdout
#            sys.stderr=self.old_stderr

enamldef PlotPane(DockPane): 
    dock_area='right'
    title = 'Plot Pane'
    PlotBox:
        pass
    
enamldef LogPane(DockPane): lp:
    #attr old_stdout=sys.stdout
    #attr old_stderr=sys.stderr
    #attr logstr=""
    dock_area='bottom'
    title = "Log"
    #visible::
    #    boss.display.redirect_stdout(lp.visible)
    #activated :: boss.display.redirect_stdout(lp.visible)
    #closed:: print "log pane closed"
    Container:
        padding = 0
        MultilineField: mlf:
            text << boss.display.log_str

enamldef SavePane(DockPane):
    dock_area='top'
    title = "Save"
    SaveWrap:
        filer = boss.save_file
        coder=boss.run
        olp=boss.BASE_DIR+boss.DIVIDER+boss.LOG_NAME

enamldef ReadPane(DockPane):
    dock_area='top'
    title = "Read"
    ReadWrap:
        filer = boss.read_file

enamldef ReadSavePane(DockPane):
    dock_area='top'
    title = "Save and Read"
    ReadSaveWrap:
        read_file = boss.read_file
        save_file = boss.save_file
        runcode = boss.run

enamldef PlotItem(DockItem):
    attr plotr
    name="plot1"
    title="Plot 1"
    PlotContainer:
        pass

enamldef BaseItem(DockItem):
    attr instr
    name = instr.name
    title = cap_case(instr.name)
    DynamicTemplate:  #use of dynamic template allows custom instrument layouts if defined in enaml
        base = BaseTemp
        args = (instr.view,)

class tempclass:
    name="plot1"

def find_targets(dock_items, target_items=[]):
    names=(o.name for o in dock_items)
    targets=(o.name for o in target_items)
    overlap=list(set(targets).intersection(names))
    return overlap

#def find_target(dock_items, target_item):
#    names=(o.name for o in dock_items)
#    return target in items

#def show_base2(area, instr, guiItem):
#    if instr!=None:
#        targets=find_targets(dock_items=area.dock_items(), target_items=instr.boss.bases)
#        if targets==[]:
#            item=guiItem(area, instr=instr)
#            op = InsertItem(item=item.name, position = 'left')
#            area.update_layout(op)
#        elif instr.name not in targets:
#            item=guiItem(area, instr=instr)
#            op = InsertTab(item=item.name, target=targets[0])
#            area.update_layout(op)

def show_all_bases(area, boss):
    for item in boss.bases:
        show_base(area, item)


#    targets=find_targets(dock_items=area.dock_items(), target_items=[tempclass()])
#    if targets==[]:
#        item=PlotItem(area, plotr=plot)
#        op = InsertItem(item=item.name, position = 'right')
#        area.update_layout(op)
#    elif "plot1" not in targets:
#        item=PlotItem(area, plotr=plot)
#        op = InsertTab(item=item.name, target=targets[0])
#        area.update_layout(op)

#def show_ploty(area, plot, position='right', **kwargs):
#    targets=find_targets(dock_items=area.dock_items(), target_items=[tempclass()])
#    if targets==[]:
#        item=PlotItem(area, **kwargs) #plotr=plot)
#        op = InsertItem(item=item.name, position = position)#'right')
#        area.update_layout(op)
#    elif "plot1" not in targets:
#        item=PlotItem(area, plotr=plot)
#        op = InsertTab(item=item.name, target=targets[0])
#        area.update_layout(op)


#def show_basey(area, base, ItemType=DockItem,  position='left', InsertOP=InsertItem, TabOP=InsertTab, target_items=[tempclass()], **kwargs):
#    if base!=None:
#        targets=find_targets(dock_items=area.dock_items(), target_items=target_items) #base.boss.bases)
#        print base.name not in targets
#        if targets==[]:
#            show_item(base.name, area, ItemType=ItemType, OP=InsertItem, position=position, **kwargs)
            #item=ItemType(area, **kwargs)
            #op = InsertOP(item=item.name, position = position)
            #area.update_layout(op)
#        elif base.name not in targets:
#            show_item(base.name, area, target=targets[0], ItemType=DockItem, OP=InsertTab, **kwargs)
            #item=ItemType(area, **kwargs)
            #op = TabOP(item=item.name, target=targets[0])
            #area.update_layout(op)

def show_item(name, area, target=None, ItemType=DockItem, position='left', OP=InsertItem, **kwargs):
    item=ItemType(area, **kwargs)
    if target==None:
        if OP==InsertItem:
            op = OP(item=name, position=position)
        else:
            op = OP(item=name)
    else:
        if OP==InsertItem:
            op = OP(item=name, target=target, position=position)
        else:
            op = OP(item=name, target=target)
    area.update_layout(op)

def show_general_item(area, item, ItemType=DockItem, position='left', target_items=[tempclass()], **kwargs):
    if item!=None:
        targets = find_targets(dock_items=area.dock_items(), target_items=target_items)
        if targets==[]:
            show_item(item.name, area, ItemType=ItemType, OP=InsertItem, position=position, **kwargs)
        elif item.name not in targets:
            show_item(item.name, area, target=targets[0], ItemType=ItemType, OP=InsertTab, **kwargs)

def show_base(area, base):
    if base!=None:
        show_general_item(area, base, ItemType=BaseItem, target_items=base.boss.bases, instr=base)

def show_plot(area, plot):
    shoe_general_item(area, plot, ItemType=PlotItem, position='right', target_items=base.boss.plot_list, plotr=plot)

    #dock_items=area.dock_items()
    #dock_names=(o.name for o in dock_items)
    #if name not in dock_names:
    #    item=ItemType(area, **kwargs)
    #    op = OP(item=name, target=target, position=position)
    #    area.update_layout(op)
#
#enamldef BaseMain(MainWindow): main:
#    attr boss
#    attr instrin: None
#    title="Base"
#    #alias readpane
#    #ReadSavePane: readpane:
#    #    visible = True #False
#    alias savepane
#    SavePane: savepane:
#        visible = False
#    alias logpane
#    LogPane: logpane:
#        pass

enamldef BossMain(MainWindow): main:
    attr boss
    attr base: None
    title="Base"
    initial_size=(1200,800)
    #alias readpane
    #ReadSavePane: readpane:
    #    visible = True #False
    alias savepane
    SavePane: savepane:
        visible = False
    alias logpane
    LogPane: logpane:
        pass
    alias plotpane
    PlotPane: plotpane:
        pass

    #title="Boss"
#    attr path : unicode=u''
#    attr counter = 0
#    initial_size=(500, 500)
#    constraints = [ height == 500]
#    StatusBar: statbar:
#        StatusItem:
#            Label:
#                text = 'Status:'
#        StatusItem:
#            Label:
#                text = 'other stuff really happened:'
#
    BossToolBar:
        pass
    alias bossarea
    Container: mycont:
        constraints = [mycont.width==bossarea.width, mycont.height==bossarea.height]
        alias bossarea
        DockArea: bossarea:
            activated :: show_base(bossarea, base)


enamldef PlotMain(MainWindow): main:
    attr plotin
    attr boss
    attr path : unicode=u''
    BossToolBar:
        pass
    #alias bosspane
    #BossPane: bosspane:
        #window:=main
    #    visible = False
    alias logpane
    LogPane: logpane:
        pass
    alias bossarea
    Container:
        alias bossarea
        DockArea: bossarea:
            layout = TabLayout(plotin.name)
            PlotItem:
                plotr=plotin
