# -*- coding: utf-8 -*-
"""
Created on Tue Feb 24 11:26:25 2015

@author: thomasaref
Implemements GUIs for saving and loading files
"""

from enaml.layout.api import vbox, hbox, spacer, align
from enaml.widgets.api import (Container, Label, PushButton, Field, ObjectCombo, Window,
                               FileDialogEx, MultilineField, GroupBox, HGroup, VGroup, Separator)
from enaml.core.api import Conditional
from taref.core.atom_extension import get_tag
from taref.core.fundcore_e import AgentWindow

enamldef DirectoryInterface(VGroup):
    attr folder
    attr show_details = folder.show_details
    attr show_simple = folder.show_simple
    attr main_file
    Conditional:
        condition=show_details
        HGroup:
            padding=0
            align_widths=False
            Label:
                text = 'Base directory'
            Field:
                text := folder.base_dir
            PushButton:
                text = 'Browse'
                clicked ::
                    path = FileDialogEx.get_existing_directory(current_path=folder.base_dir)
                    if path:
                        folder.base_dir = path
        HGroup:
            padding=0
            align_widths=False
            Label:
                text = "Main dir:"
            Field:
                text := folder.main_dir
            Label:
                text = "Quality:"
            ObjectCombo:
                items = list(folder.get_member('quality').items)
                selected := folder.quality
            Conditional:
                condition = main_file is not None#hasattr(filer, "main_file")
                Label:
                    text = "File name:"
                Field: main_file_fld:
                    constraints = [main_file_fld.width == parent.contents_width/5]
                    text := main_file
        Separator:
            pass

    Conditional:
        condition=show_simple
        HGroup:
            padding=0
            align_widths=False
            Label:
                text = "Directory:"
            Field:
                text:=folder.dir_path
            PushButton:
                text = 'Browse'
                clicked ::
                    path = FileDialogEx.get_existing_directory(current_path=folder.base_dir)
                    if path:
                        folder.dir_path = path

enamldef FilerInterface(VGroup):
    attr filer
    attr show_data_str = filer.show_data_str
    DirectoryInterface:
        folder=filer.folder
    Separator:
        pass
    HGroup:
        padding=0
        align_widths=False
        Label:
            text = "File path:"
        Field:
            text:=filer.file_path
        PushButton:
            text = 'Browse'
            clicked :: filer.browse_clicked()
        Conditional:
            condition = hasattr(filer, "file_action")
            PushButton:
                text = get_tag(filer, "file_action", "button_label", "File Action")
                clicked :: filer.file_action(filer)
    Conditional:
        condition = show_data_str
        MultilineField:
            read_only=True
            text<<filer.data_str

enamldef DirectoryExt(DirectoryInterface):
    """extension needed to work with instrview. iterable is expected even though nothing is iterating here"""
    attr iterable
    attr vmodel = parent.vmodel
    folder = vmodel

enamldef FilerExt(FilerInterface):
    """extension needed to work with instrview. iterable is expected even though nothing is iterating here"""
    attr iterable
    attr vmodel=parent.vmodel
    filer = vmodel

enamldef FolderMain(AgentWindow):
    title="Folder test"
    DirectoryInterface:
        folder = agent

enamldef FilerMain(AgentWindow):
    title="Filer test"
    FilerInterface: fi:
        filer = agent
