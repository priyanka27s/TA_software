# -*- coding: utf-8 -*-
"""
Created on Mon Jul 13 20:55:47 2015

@author: thomasaref
"""

from enaml.widgets.api import ( Window, Field, PushButton, ToolBar, Action, MainWindow,
    Container, MultilineField, DockPane, HGroup, VGroup, GroupBox)
from enaml.layout.geometry import Pos, Rect, Size
from enaml.core.api import Looper, Conditional
from atom.api import List, Typed
from enaml.core.declarative import d_
from taref.core.backbone import get_attr
from e_Plotter import PlotWindow
from log_e import LogWindow

from taref.core.fundtemps_e import InstrHolder
from taref.core.log import log_debug

enamldef agentView(Window):
    """default view for an agent based on dynamic templating"""
    attr agent
    destroy_on_close=False
    initial_size=get_attr(agent, "initial_size", (-1,-1))
    initial_position=get_attr(agent, "initial_position", (-1,-1))
    InstrHolder:
        instr:=agent

class showWindow(MainWindow):
    """adds a list of other windows to a MainWindow and a property that determines if all are visible"""
    #a_wins=d_(List(default=[]))
    #other_wins=d_(List(default=[]))
    #all_wins=d_(List(default=[]))
    #agent_wins=d_(List(default=[]))

    @property
    def agent_wins(self):
        return [w for w in self.all_wins if hasattr(w, "agent")]

    @property
    def all_wins(self):
        return [w for w in self.windows if w!=self]

    @property
    def other_wins(self):
        return [w for w in self.all_wins if w not in self.agent_wins and not isinstance(w, LogWindow)]

    @property
    def all_showing(self):
        all_showing=True
        for w in self.agent_wins:
            if not w.visible:
                all_showing=False
        return all_showing

enamldef coreWindow(showWindow): sv:
    """extends showWindow to initialize a_wins when activated and close all windows when the core is closed"""
    initial_position=(0,0)
    #activated ::
        #sv.all_wins=[w for w in sv.windows if w!=sv]
    #    sv.a_wins=[w for w in sv.all_wins if hasattr(w, "agent")]
        #sv.other_wins=[w for w in sv.all_wins if w not in sv.a_wins and not isinstance(w, LogWindow)]
    #    print sv.all_wins
    #    print sv.agent_wins
    #    print sv.other_wins
    closed ::
        for w in sv.windows:
            w.close()

enamldef AgentToolBar(ToolBar):
    """a toolbar that lists all agent windows and shows and hides them respectively when action is triggered"""
    attr boss_window
    dock_area="left"
    Action:
        text="Agents:"
        triggered::
            all_showing=boss_window.all_showing
            for w in boss_window.agent_wins:
                if all_showing:
                    w.hide()
                else:
                    w.show()
                    w.send_to_front()
        tool_tip = "Show/hide all agents"
    Action:
        separator=True
    Looper: loopy:
        iterable = boss_window.agent_wins
        Action:
            text = loop_item.name
            tool_tip = "Show agent: {0}".format(loop_item.name)
            triggered::
                loop_item.show()
                loop_item.send_to_front()

def get_name(obj):
    if obj.name=="":
        return unicode(obj)
    return obj.name
enamldef OtherToolBar(ToolBar):
    """a toolbar that lists all agent windows and shows and hides them respectively when action is triggered"""
    attr boss_window
    dock_area="right"
    Action:
        text="Windows:"
#        triggered::
#            all_showing=boss_window.all_showing
#            for w in boss_window.agent_wins:
#                if all_showing:
#                    w.hide()
#                else:
#                    w.show()
#                    w.send_to_front()
#        tool_tip = "Show/hide all agents"
    Action:
        separator=True
    Looper: loopy:
        iterable = chief.other_windows
        Action:
            text = loop_item
            tool_tip = "Show window: {0}".format(loop_item)
            triggered::
                getattr(chief, loop_item).view_window.show()
            #    loop_item.send_to_front()

enamldef basicView(coreWindow): sv:
    """the most basic view controller of a collection of Atoms without a chief"""
    AgentToolBar:
        boss_window:=sv

enamldef LogSaveToolBar(ToolBar):
    ToolBar:
        dock_area="top"
        Conditional:
            condition = hasattr(chief, "view_log")
            Action:
                text="Log"
                triggered::
                    chief.view_log.show()
                    chief.view_log.send_to_front()
                tool_tip = "Show log"
        Action:
            text="Save"
            triggered::
                log_debug(sv.windows)
        #        savepane.show()
            tool_tip = "Show save pane"
        Action:
            text = "PlotPane"
         #   triggered:: plotpane.show() #print dir(bossarea) #show_plot(bossarea, boss.plot) #show_pane(dyn_pages, 'Plot')
         #   tool_tip = "Show plot controls"

enamldef chiefView(coreWindow): sv:
    """a default view of the chief for agents with a chief"""
    attr chief
    title = chief.name
    activated :: chief.activated()
    Conditional:
        condition = getattr(chief, "run_func_names", []) != []
        VGroup:
            GroupBox:
                Looper:
                    iterable=chief.run_func_names
                    PushButton:
                        text = loop_item
                        clicked :: chief.run_func_dict[loop_item]()
            PushButton:
                text = "Run All"
                clicked ::
                    log_debug(sv.windows)
                    print sv.agent_wins
                    print sv.all_wins
                    print sv.other_wins
                    #chief.run_all()
                tool_tip = "Runs all functions"
    LogSaveToolBar:
        pass
    Conditional:
        condition = False #sv.chief is not None
        ToolBar:
            dock_area="right"

            Action:
                text = "Plot"
            #    triggered::
            #         tagent=[b for b in boss.agents if b.name=="EBL_Item_test"][0]
            #         tagent.plot(tagent)
                        #print bossarea.dock_items()[0].name
                        #show_plot(boss.plot.name+'plot', bossarea, target=bossarea.dock_items()[0].name, ItemType=PlotItem, position="right", plotr=boss.plot)
                tool_tip = "Show plot"

    AgentToolBar:
        boss_window:=sv
    OtherToolBar:
        boss_window:=sv

    ToolBar:
        dock_area="left"
        Conditional:
            condition = sv.chief is not None
            Action:
                separator=True
            Action:
                separator=True
            Action:
                text="Plots"
                triggered::
                    all_showing=sv.all_showing
                    for w in sv.agent_wins:
                        print w.name
                        if all_showing:
                            w.hide()
                        else:
                            w.show()
                            w.send_to_front()
                tool_tip = "Show/hide all agents"
            Action:
                separator=True

            Looper: #loopy:
                iterable << sv.chief.plots #a_wins
                Action:
                    text = loop_item
                    tool_tip = "Show/hide plot: {0}".format(loop_item)
                    #triggered::
                    #    if loop_item.visible:
                    #        loop_item.hide()
                    #    else:
                    #        loop_item.show()
