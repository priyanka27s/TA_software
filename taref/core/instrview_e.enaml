# -*- coding: utf-8 -*-
"""
Created on Wed Jan 27 21:41:24 2016

@author: thomasaref
"""
import enaml.qt #work around for Qdate error. import order
#from taref.core.usertemps_e import UserInstrView
from enaml.core.api import Conditional, DynamicTemplate, Looper
from enaml.widgets.api import VGroup, PushButton, Container, GroupBox, Label
from taref.core.var_e import Var
from taref.core.typedview_e import TypedView
from taref.core.fundcore_e import aHGroup
from atom.api import Callable, Typed, Instance
from taref.core.atom_extension import get_type, get_tag, set_tag, get_run_params, get_main_params
from types import MethodType

##########################DYNAMIC################################
enamldef DynExt(DynamicTemplate):
    base = DynTypedView
    args << (get_type(parent.vmodel, parent.vname), get_tag(parent.vmodel, parent.vname, "spec"))

enamldef DynVar(Var):
    alias ext
    DynExt: ext:
        pass

template DynTypedView(AttrType, spec):
    TypedView(AttrType, spec): pass


###################### INSTRVIEW #################################

enamldef AgentLooper(Looper):
    attr vmodel=parent.vmodel
    iterable=get_main_params(vmodel)
    DynVar:
        vname=loop_item

template InstrView(instr_view):
    instr_view:
        pass

enamldef InstrHolder(VGroup):
    attr vmodel=parent.vmodel
    DynamicTemplate:
        base = InstrView
        args=(getattr(vmodel, "view", AgentLooper),)
        #data=dict(iterable=get_main_params(vmodel))


########################## CALLABLE ###############################
enamldef CallableExt(aHGroup):
    """extends Var for Callable"""
    attr vmodel=parent.vmodel
    attr vname=parent.vname
    attr vvalue=parent.vvalue
    alias push_button : pb
    PushButton: pb:
        text = 'Run'
        clicked ::
            if not isinstance(vvalue, MethodType):
                vvalue(vmodel, *[getattr(vmodel, name) for name in get_run_params(vvalue)])
            else:
                vvalue(*[getattr(vmodel, name) for name in get_run_params(vvalue)])
    Conditional: co:
        condition = get_run_params(vvalue)!=[]
        GroupBox: gb:
            title = get_tag(vmodel, vname, 'label', vname)+" parameters:"
            attr vmodel=parent.parent.vmodel
            DynamicTemplate:
                base = InstrView
                args=(getattr(vmodel, "view", AgentLooper),)
                data=dict(iterable=get_run_params(vvalue))

enamldef CallableVar(Var):
    alias ext
    CallableExt: ext:
        pass

template DynTypedView(AttrType: Callable, spec):
    """default template for Enum"""
    CallableExt: pass

##################### TYPED ########################################
enamldef TypedExt(GroupBox):
    """extends Var for Typed"""
    title=get_tag(vmodel, vname, 'group_label', vname+" parameters:")
    InstrHolder:
        vmodel:=parent.parent.vvalue

enamldef TypedVar(Var):
    alias ext
    TypedExt: ext:
        pass

template DynTypedView(AttrType: Typed, spec):
    """interface for a Typed member."""
    TypedExt: pass

template DynTypedView(AttrType: Instance):
    TypedView(Typed): pass
