# -*- coding: utf-8 -*-
"""
Created on Thu Jul  9 16:51:22 2015

@author: thomasaref

A core collection of enamldefs including units for ints and floats and non-padded containers
"""
from taref.core.log import log_debug
from enaml.widgets.api import  ( HGroup, Container, GroupBox,  Field, Label, SpinBox,
                                MultilineField, VGroup, ScrollArea, Window, MainWindow, PushButton)
from enaml.core.api import Conditional
from enaml.validator import IntValidator, FloatValidator
from enaml.layout.api import spacer
from taref.physics.units import unit_func, unitless


enamldef aWindow(Window):
    """a Window that is not destroyed on close"""
    destroy_on_close=False

enamldef AgentWindow(MainWindow):
    """backbone for agent window"""
    attr agent
    destroy_on_close=False
    initial_size=getattr(agent, "initial_size", (-1,-1))
    initial_position=getattr(agent, "initial_position", (-1,-1))
    closed ::
        self.set_position(self.position())
        self.set_size(self.size())

enamldef aHGroup(HGroup):
    """a non-padded, non-width-aligning HGroup"""
    padding=0
    align_widths=False
    trailing_spacer=spacer

enamldef aVGroup(ScrollArea):
    """A non-padded VGroup with builtin scroll area"""
    VGroup:
        padding=0

enamldef aContainer(Container):
    """a non-padded container"""
    padding=0

enamldef aGroupBox(GroupBox):
    """a non-padded GroupBox"""
    padding=0

enamldef CheckButton(PushButton):
    """a PushButton that stays checked depending on value. Can be made read only. A substitute for CheckBox"""
    attr value : bool = False
    attr read_only : bool = False
    attr True_text = "True"
    attr False_text = "False"
    text << unicode(True_text if value else False_text)
    checkable = True
    checked << value
    clicked ::
        if not read_only:
            self.value=self.checked
        else:
            self.checked=self.value

enamldef UnitHGroup(aHGroup):
    """shared structure between UnitIntField and UnitFloatField"""
    attr minimum = None
    attr maximum = None
    attr unit : unit_func = unitless
    attr show_uvalue : bool = False
    attr display_unit = None

    alias unit_field
    alias read_only:unit_field.read_only
    Field: unit_field:
        pass
    Conditional:
        condition = unit!=unitless
        Label:
            text = unicode(unit.unit)
    Conditional:
        condition = show_uvalue
        Label:
            text << unit.show_unit(uvalue)
    Conditional:
        condition = display_unit is not None
        Label:
            text << "["+display_unit.unit+" "+display_unit.show_unit(uvalue*display_unit)+"]"

enamldef UnitIntField(UnitHGroup):
    """ A field that only accept integer inputs and normalizes them by a unit factor"""
    attr uvalue = 0
    attr base=10
    unit_field.validator<< IntValidator(base=base, minimum=minimum, maximum=maximum)
    unit_field.text << unicode(int(uvalue/unit))
    unit_field.text :: parent.uvalue=int(int(text)*unit)
    unit_field.activated::
        if not validator.validate(text):
            if parent.minimum is None:
                if parent.maximum is None:
                    parent.uvalue=0
                else:
                    parent.uvalue=int(parent.maximum*unit)
            else:
                parent.uvalue=int(parent.minimum*unit)

enamldef UnitSpinBox(aHGroup):
    """A SpinBox for integers with units"""
    attr uvalue = 0
    attr unit : unit_func = unitless
    attr show_uvalue : bool = False
    attr display_unit = None
    alias maximum : sb.maximum
    alias minimum : sb.minimum
    SpinBox: sb:
        value << int(uvalue/unit)
        value :: parent.uvalue=int(value*unit)
    Conditional:
        condition = unit!=unitless
        Label:
            text = unicode(unit.unit)
    Conditional:
        condition = show_uvalue
        Label:
            text << unit.show_unit(uvalue)
    Conditional:
        condition = display_unit is not None
        Label:
            text << "["+display_unit.unit+" "+display_unit.show_unit(uvalue*display_unit)+"]"


enamldef UnitFloatField(UnitHGroup):
    """a field for floats with units"""
    attr allow_exponent : bool = True
    attr uvalue : float = 0.0
    unit_field.validator<<FloatValidator(minimum=minimum, maximum=maximum, allow_exponent=allow_exponent)
    unit_field.text << unicode(uvalue/unit)
    unit_field.text :: parent.uvalue=float(text)*unit
    unit_field.activated::
        if not validator.validate(text):
            if parent.minimum is None:
                if parent.maximum is None:
                    parent.uvalue=0.0
                else:
                    parent.uvalue=parent.maximum*unit
            else:
                parent.uvalue=parent.minimum*unit

################ test window ###################
from taref.physics.units import GHz, dBm, mW


from numpy import sqrt
class sqrd(unit_func):
    def func(self, value):
        return value**2
    def inv_func(self, value):
        return sqrt(value)

enamldef Main(Window):
    """test window"""
    VGroup:
        UnitFloatField: uff:
            uvalue = 0.1e9
            unit=GHz
            show_uvalue=True
            minimum=1.0
            maximum=10.0
        UnitFloatField:
            uvalue = 1.0*dBm/mW
            unit=dBm/mW #"Hz"
            show_uvalue=True
            minimum=-30.0
            maximum=0.0
        UnitFloatField:
            uvalue = 1.0
            display_unit=dBm/mW #"Hz"
            show_uvalue=True
            minimum=-30.0
            maximum=0.0

        UnitIntField:
            uvalue=10*GHz
            show_uvalue=True
            #unit=GHz
            minimum=10
            maximum=20
        UnitSpinBox: isb:
            uvalue=10
            #unit=GHz
            maximum = 100000
            show_uvalue=True
        UnitFloatField:
            #uvalue = unit_func(0.5)
            unit=sqrd(unit=r"^2", format_str=r"$^2$")
            #unit_factor=0.25
            #unit="Hz"
            show_uvalue=True
            #display_func=sq

