# -*- coding: utf-8 -*-
"""
Created on Thu Jul  9 16:51:22 2015

@author: thomasaref

A core collection of enamldefs including units for ints and floats and non-padded containers
"""
from taref.core.log import log_debug
from enaml.widgets.api import  ( HGroup, Container, GroupBox,  Field, Label, SpinBox,
                                MultilineField, VGroup, ScrollArea, Window)
from enaml.core.api import Conditional
from enaml.validator import IntValidator, FloatValidator

enamldef aWindow(Window):
    """a Window that is not destroyed on close"""
    destroy_on_close=False

enamldef AgentWindow(aWindow):
    """backbone for agent window"""
    attr agent
    initial_size=getattr(agent, "initial_size", (-1,-1))
    initial_position=getattr(agent, "initial_position", (-1,-1))

enamldef aHGroup(HGroup):
    """a non-padded, non-width-aligning HGroup"""
    padding=0
    align_widths=False

enamldef aVGroup(ScrollArea):
    """A non-padded VGroup with builtin scroll area"""
    VGroup:
        padding=0

enamldef aContainer(Container):
    """a non-padded container"""
    padding=0

enamldef aGroupBox(GroupBox):
    """a non-padded GroupBox"""
    padding=0

def None_div(numerator, denominator):
    if numerator is None:
        return numerator
    return numerator/denominator

enamldef UnitIntField(aHGroup):
    """ A field that only accept integer inputs and normalizes them by a unit factor"""
    attr minimum = None
    attr maximum = None
    attr uvalue : int = 0
    attr unit_factor : int = 1
    attr unit = ""
    attr show_uvalue : bool = False
    func calc_uvalue(value, unit_factor):
        self.uvalue = int(value)*unit_factor
    attr read_only : bool = False

    Field:
        read_only=parent.read_only
        activated::
            if not validator.validate(text):
                if parent.minimum is None:
                    if parent.maximum is None:
                        parent.uvalue=0
                    else:
                        parent.uvalue=parent.maximum
                else:
                    parent.uvalue=parent.minimum
        text << unicode(uvalue/unit_factor)
        text ::
            calc_uvalue(text, unit_factor)
        validator << IntValidator(base=10, minimum=None_div(minimum,unit_factor), maximum=None_div(maximum, unit_factor))

    Label: ul:
        text = unicode(unit)
        visible = unit!=""

    Conditional:
        condition = show_uvalue
        Label: vl:
            text << unicode("({})".format(uvalue)) #get_tag(instrin, name, 'unit', "no unit")

enamldef UnitSpinBox(aHGroup):
    """A SpinBox for integers with units"""
    attr uvalue : int = 0
    attr unit_factor : int = 1
    attr unit = ""
    attr show_uvalue : bool = False
    alias maximum : sb.maximum
    alias minimum : sb.minimum

    func calc_uvalue(value, unit_factor):
        self.uvalue = value*unit_factor

    SpinBox: sb:
        value << uvalue/unit_factor
        value :: calc_uvalue(value, unit_factor)

    Label: ul:
        text = unicode(unit)
        visible = unit!=""

    Conditional:
        condition = show_uvalue
        Label: vl:
            text << unicode("({})".format(uvalue))

    
enamldef UnitFloatField(aHGroup):
    """a field for floats with units"""
    attr minimum = None
    attr maximum = None
    attr unit_factor : float = 1.0
    attr allow_exponent : bool = True
    attr unit = ""
    attr uvalue : float = 0.0
    attr show_uvalue : bool = False
    attr read_only : bool = False
    
    func calc_uvalue(text, unit_factor):
        self.uvalue=float(text)*unit_factor

    Field:
        read_only=parent.read_only
        activated::
            if not validator.validate(text):
                if parent.minimum is None:
                    if parent.maximum is None:
                        parent.uvalue=0.0
                    else:
                        parent.uvalue=parent.maximum
                else:
                    parent.uvalue=parent.minimum
        text << unicode(uvalue/unit_factor)
        text :: calc_uvalue(text, unit_factor)
        validator << FloatValidator(minimum=None_div(minimum, unit_factor), maximum=None_div(maximum,unit_factor), allow_exponent=allow_exponent)

    Label:
        text = unicode(unit)
        visible = unit!=""

    Conditional:
        condition = show_uvalue
        Label: vl:
            text << unicode("({})".format(uvalue))


################ test window ###################
enamldef Main(Window):
    """test window"""
    VGroup:
        aHGroup:
            UnitFloatField: uff:
                uvalue = 0.1
                unit_factor=10.0
                unit="Hz"
                show_uvalue=True
            UnitIntField:
                uvalue=10
                show_uvalue=True
            UnitSpinBox: isb:
                uvalue=10
                unit_factor=10
                maximum = 100000
                show_uvalue=True


