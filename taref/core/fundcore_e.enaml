# -*- coding: utf-8 -*-
"""
Created on Thu Jul  9 16:51:22 2015

@author: thomasaref

A core collection of enamldefs including units for ints and floats and non-padded containers
"""
from taref.core.log import log_debug
from enaml.widgets.api import  ( HGroup, Container, GroupBox,  Field, Label, SpinBox,
                                MultilineField, VGroup, ScrollArea, Window, MainWindow, PushButton)
from enaml.core.api import Conditional
from enaml.validator import IntValidator, FloatValidator
from enaml.layout.api import spacer
from taref.physics.units import mult_unit

enamldef aWindow(Window):
    """a Window that is not destroyed on close"""
    destroy_on_close=False

enamldef AgentWindow(MainWindow):
    """backbone for agent window"""
    attr agent
    destroy_on_close=False
    initial_size=getattr(agent, "initial_size", (-1,-1))
    initial_position=getattr(agent, "initial_position", (-1,-1))
    closed ::
        self.set_position(self.position())
        self.set_size(self.size())

enamldef aHGroup(HGroup):
    """a non-padded, non-width-aligning HGroup"""
    padding=0
    align_widths=False
    trailing_spacer=spacer

enamldef aVGroup(ScrollArea):
    """A non-padded VGroup with builtin scroll area"""
    VGroup:
        padding=0

enamldef aContainer(Container):
    """a non-padded container"""
    padding=0

enamldef aGroupBox(GroupBox):
    """a non-padded GroupBox"""
    padding=0

enamldef CheckButton(PushButton):
    """a PushButton that stays checked depending on value. Can be made read only. A substitute for CheckBox"""
    attr value : bool = False
    attr read_only : bool = False
    attr True_text = "True"
    attr False_text = "False"
    text << unicode(True_text if value else False_text)
    checkable = True
    checked << value
    clicked ::
        if not read_only:
            self.value=self.checked
        else:
            self.checked=self.value

enamldef UnitField(Field):
    """base for building UnitIntField and UnitFloatField below"""
    read_only=parent.read_only
    activated::
        if not validator.validate(text):
            if parent.minimum is None:
                if parent.maximum is None:
                    parent.uvalue=unit.coercer(0)
                else:
                    parent.uvalue=parent.maximum
            else:
                parent.uvalue=parent.minimum
    text << unicode(uvalue/unit)
    text :: parent.uvalue=text*unit

#class mult_unit_factor(object):
#    def __init__(self, unit_factor=1.0, coercer=float):
#        self.unit_factor=unit_factor
#        self.coercer=coercer
#        self.unit=""
#
#    def __call__(self, text):
#        return self.coercer(text)*self.unit_factor
#
#    def inv(self, value):
#        if value is None:
#            return value
#        return value/self.unit_factor


enamldef UnitHGroup(aHGroup):
    """shared structure between UnitIntField and UnitFloatField"""
    attr minimum = None
    attr maximum = None
    attr unit = getattr(unit_func, "unit", "")
    attr show_uvalue : bool = False
    attr read_only : bool = False
    attr display_func = None

    alias unit_field
    UnitField: unit_field:
        pass
    Conditional:
        condition = unit!=""
        Label:
            text = unicode(unit.unit)
    Conditional:
        condition = show_uvalue
        Label: vl:
            text << unicode("({0} {1})".format(uvalue, unit.output_unit))
    Conditional:
        condition = display_func is not None
        Label:
            text << display_func.unit+"  ["+unicode(uvalue*display_func)+" "+display_func.output_unit+"]"

enamldef UnitIntField(UnitHGroup):
    """ A field that only accept integer inputs and normalizes them by a unit factor"""
    attr uvalue : int = 0
    attr unit_factor : int
    attr unit_func=mult_unit(unit_factor=unit_factor, coercer=int)
    attr base=10
    unit_field.validator<< IntValidator(base=base, minimum=unit_func.inv(minimum), maximum=unit_func.inv(maximum))

enamldef UnitSpinBox(aHGroup):
    """A SpinBox for integers with units"""
    attr uvalue : int = 0
    attr unit_factor : int
    attr unit_func=mult_unit(unit_factor=unit_factor, coercer=int)
    attr unit = getattr(unit_func, "unit", "")
    attr show_uvalue : bool = False
    attr display_func = None
    alias maximum : sb.maximum
    alias minimum : sb.minimum
    SpinBox: sb:
        value << unit_func.inv(uvalue)
        value :: parent.uvalue=unit_func(value)
    Label:
        text = unicode(unit)
        visible = unit!=""
    Conditional:
        condition = show_uvalue
        Label: vl:
            text << unicode("({})".format(uvalue))
    Conditional:
        condition = display_func is not None
        Label:
            text << "["+unicode(display_func(uvalue))+" "+getattr(display_func, "unit", display_func.func_name)+"]"

from taref.physics.units import unit_func as unit_f, GHz, dBm, mW, unitless

enamldef UnitFloatField(UnitHGroup):
    """a field for floats with units"""
    attr allow_exponent : bool = True
    attr unit = unitless#(unit_factor=unit_factor)
    #attr unit_func=mult_unit(unit_factor=unit_factor, coercer=float)
    attr uvalue : float = 0.0
    unit_field.validator<<FloatValidator(minimum=minimum*unit, #unit_func.inv(minimum),
                                         maximum=maximum*unit, #unit_func.inv(maximum),
                                         allow_exponent=allow_exponent)

################ test window ###################


from numpy import sqrt
class sqrd(unit_f):
    def func(self, value):
        return value**2
    def inv_func(self, value):
        return sqrt(value)


#def sq(value):
#    return value*value
#sq.unit="squared"

enamldef Main(Window):
    """test window"""
    VGroup:
        UnitFloatField: uff:
            uvalue = 0.1e9
            #unit_factor=10.0
            unit=GHz #"Hz"
            show_uvalue=True
            #minimum=1.0
            #maximum=10.0
        UnitFloatField:
            uvalue = 0.0
            display_func=dBm #"Hz"
            show_uvalue=True
            #minimum=1.0
            #maximum=10.0

#        UnitIntField:
#            uvalue=10
#            show_uvalue=True
#        UnitSpinBox: isb:
#            uvalue=10
#            unit_factor=10
#            maximum = 100000
#            show_uvalue=True
        UnitFloatField:
            #uvalue = unit_func(0.5)
            unit=sqrd(unit=r"^2", format_str=r"$^2$")
            #unit_factor=0.25
            #unit="Hz"
            show_uvalue=True
            #display_func=sq

