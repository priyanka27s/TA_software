# -*- coding: utf-8 -*-
"""
Created on Fri Jan 22 19:49:53 2016

@author: thomasaref
"""

from taref.core.log import log_debug
from enaml.core.api import Conditional, DynamicTemplate, Looper
from enaml.widgets.api import (Window, Container, Label, HGroup, VGroup, ScrollArea, ObjectCombo, SpinBox, PushButton,  GroupBox)#, Form)
from taref.core.atom_extension import get_tag, get_type, get_map, get_main_params, get_run_params
from atom.api import Bool, Int, Typed, List, Coerced, Enum, Callable, Float, Str, Unicode, Range, FloatRange, Instance
from taref.core.universal import msg
from numpy import ndarray
from taref.core.var_e import (Var, VarVGroup, FieldExt, MultilineExt, BoolExt, UnitIntFieldExt, UnitSpinBoxExt, UnitRangeExt, UnitFloatExt, UnitFloatRangeExt, EnumExt)
from taref.core.fundcore_e import aHGroup, aVGroup
from taref.core.usertemps_e import UserInstrView
from types import MethodType


enamldef DynExt(DynamicTemplate):
    base = TypedView
    args << (get_type(parent.vmodel, parent.vname), get_tag(parent.vmodel, parent.vname, "spec"))

enamldef DynVar(Var):
    DynExt: pass

template TypedView(AttrType, spec):
    """default template for unknown type and spec"""
    Label:
        text << msg(parent.vname, parent.vvalue, AttrType, spec)

#####################  STRINGS #####################
template TypedView(AttrType : Unicode, spec):
    """SpinBox template for Int types"""
    FieldExt: pass

template TypedView(AttrType : Unicode, spec : "multiline"):
    """SpinBox template for Int types"""
    MultilineExt: pass

template TypedView(AttrType : Str, spec):
    """SpinBox template for Int types"""
    TypedView(Unicode, spec): pass

template TypedView(AttrType : basestring, spec):
    """SpinBox template for Int types"""
    TypedView(Unicode, spec): pass

template TypedView(AttrType : unicode, spec):
    """SpinBox template for Int types"""
    TypedView(Unicode, spec): pass

template TypedView(AttrType : str, spec):
    """SpinBox template for Int types"""
    TypedView(Unicode, spec): pass

################### BOOLEANS #########################
template TypedView(AttrType: Bool, spec):
    """default template for Bool types"""
    BoolExt: pass

template TypedView(AttrType : bool, spec):
    """bool template flows through to Bool template"""
    TypedView(Bool, spec): pass

##################### INTS ##############################
template TypedView(AttrType : Int, spec):
    """default template for Int types"""
    UnitIntFieldExt: pass

template TypedView(AttrType : int, spec):
    """int template flows through to Int templates"""
    TypedView(Int, spec): pass

template TypedView(AttrType : Int, spec : "spinbox"):
    """SpinBox template for Int types"""
    UnitSpinBoxExt: pass

################### RANGES #################################
template TypedView(AttrType : Range, spec):
    """SpinBox template for Int types"""
    UnitRangeExt: pass

template TypedView(AttrType : FloatRange, spec):
    """SpinBox template for Int types"""
    UnitFloatRangeExt: pass

##################### FLOATS ####################################################
template TypedView(AttrType : Float, spec):
    """SpinBox template for Int types"""
    UnitFloatExt: pass

template TypedView(AttrType : float, spec):
    """SpinBox template for Int types"""
    TypedView(Float, spec): pass

#################### COERCED ######################################
enamldef CoercedExt(DynamicTemplate):
    base = TypedView
    args = (type(parent.vvalue), get_tag(parent.vmodel, parent.vname, "spec"))

enamldef CoercedVar(Var):
    CoercedExt: pass

template TypedView(AttrType: Coerced, spec):
    """default template for Enum"""
    CoercedExt: pass

################### LISTS #####################################
enamldef ListExt(aHGroup):
    """requires list entries to all be of same type"""
    attr vmodel=parent.vmodel
    attr vname=parent.vname
    attr vvalue:=getattr(parent.vmodel, parent.vname)[ind.value]
    SpinBox: ind:
        minimum=0
        maximum = max(0, len(getattr(vmodel, vname))-1)
    CoercedExt:
        pass

template TypedView(AttrType: List, spec):
    """default template for List"""
    ListExt: pass

template TypedView(AttrType: list, spec):
    """list template flows through to List templates"""
    TypedView(List, spec): pass

template TypedView(AttrType: tuple, spec):
    TypedView(List, spec): pass

template TypedView(AttrType: ndarray, spec):
    TypedView(List, spec): pass

######################## ENUM ################################
template TypedView(AttrType: Enum, spec):
    """default template for Enum"""
    EnumExt: pass

enamldef EnumAttrExt(aHGroup):
    """extends Var for Enum"""
    attr vmodel=parent.vmodel
    attr vname=parent.vname
    attr vvalue=parent.vvalue
    ObjectCombo: oc:
        items = list(vmodel.get_member(vname).items)
        selected := vvalue
    Label:
        text<<oc.selected
#    DynVar:
#        vname<< oc.selected
#
template TypedView(AttrType: Enum, spec : "attribute"):
    """attribute showing template for mapped Enum"""
    EnumAttrExt: pass

########################## CALLABLE ###############################
enamldef CallableExt(aHGroup):
    """extends Var for Callable"""
    attr vmodel=parent.vmodel
    attr vname=parent.vname
    attr vvalue=parent.vvalue
    PushButton:
        text = 'Run'
        clicked :: 
            if not isinstance(vvalue, MethodType):
                vvalue(vmodel, *[getattr(vmodel, name) for name in get_run_params(vvalue)])
            else:
                vvalue(*[getattr(vmodel, name) for name in get_run_params(vvalue)])
    Conditional:
        condition = get_tag(vmodel, vname, "run_params", get_run_params(vvalue))!=[]
        GroupBox:
            title = get_tag(vmodel, vname, 'label', vname)+" parameters:"
            Container:
                attr vmodel=parent.parent.vmodel
                Looper:
                    iterable=get_run_params(vvalue)
                    DynVar:
                        vname=loop_item

enamldef CallableVar(Var):
    CallableExt: pass

template TypedView(AttrType: Callable, spec):
    """default template for Enum"""
    CallableExt: pass

###################### INSTRVIEW #################################
template InstrView(instr_view):
    """goes to user defined templates"""
    UserInstrView(instr_view):
        pass

template InstrView(instr_view: "Auto"):
    Container:
        attr vmodel=parent.vmodel
        Looper:
            iterable<<get_main_params(parent.vmodel)
            DynVar:
                vname=loop_item

enamldef InstrHolder(DynamicTemplate):
    attr vmodel=parent.vmodel
    base = InstrView
    args=(getattr(vmodel, "view", "Auto"), )


##################### TYPED ########################################
enamldef TypedExt(InstrHolder):
    """extends Var for Typed"""
    vmodel:=parent.vvalue

enamldef TypedVar(Var):
    TypedExt: pass

template TypedView(AttrType: Typed, spec):
    """interface for a Typed member."""
    TypedExt: pass

template TypedView(AttrType: Instance):
    TypedView(Typed): pass

################test window##########################

if __name__=="__main__":
    from atom.api import Atom, Value, cached_property, ContainerList, Coerced
    class Test(Atom):
        t_value=Value().tag(desc="default template for unknown type")
        t_field=Unicode("unicode").tag(desc="default template for Unicode and String")
        t_str=Str("str").tag(desc="spec=multiline template for Unicode and Str", spec="multiline")
        t_int=Int(20).tag(unit_factor=10, show_value=True, unit="x10", desc="default template for Ints showing unit, unit_factor and show_value")
        t_spinbox=Int(1).tag(desc="spec=spinbox template for Ints demonstrating low and high tags", spec="spinbox", low=2, high=5)
        t_bool=Bool(True).tag(desc="default boolean template")
        t_enum=Enum("t_int", "t_bool").tag(spec="attribute")
        t_list=ContainerList(default=[1,2,3])
        t_coerced=Coerced(int)

        @cached_property
        def t_enum_mapping(self):
            return {"t_int":self.t_int, "t_bool":self.t_bool}
        @Callable
        def t_callable(self, t_int, t_bool):
            log_debug(t_int, t_bool)

        def _observe_t_list(self, change):
            log_debug(change)

        def test_func(self, t_int=30):
            log_debug("ran")

        @cached_property
        def run_funcs(self):
            return [self.test_func]

    t=Test()

enamldef Main(Window):
    attr vmodel = t
    VarVGroup:
        DynVar:
            vname="t_int"
            tool_tip="demonstrating separate use of Var for custom enaml"
        CallableVar:
            vname="t_callable"
        CoercedVar:
            vname="t_coerced"
        ScrollArea:
            attr vmodel=parent.vmodel
            InstrHolder:
                pass #vmodel=instr


