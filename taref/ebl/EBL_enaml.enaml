# -*- coding: utf-8 -*-
"""
Created on Thu May  7 11:18:08 2015

@author: thomasaref
"""

from enaml.widgets.api import ToolBar

from enaml.widgets.api import (RawWidget, Container, Field, Form, SpinBox, GroupBox, Label, Window,
                               ProgressBar, PushButton, CheckBox, MultilineField, ScrollArea, ObjectCombo, Slider)

from enaml.layout.api import hbox, vbox, spacer, align
from enaml.core.api import DynamicTemplate, Looper, d_, Include
from enaml.stdlib.fields import FloatField, IntField
#from enaml.application import deferred_call
#from threading import Thread
#from time import sleep
#from numpy import ndarray
from atom.api import observe, Atom, Callable, Tuple, Typed, Dict, List, Float, Int, Unicode, Enum, Bool, Str, ContainerList, Range, FloatRange, Instance, Event
from enaml.layout.api import vbox, hbox, align, spacer, TabLayout, InsertItem,  InsertTab, HSplitLayout
from enaml.widgets.api import (
    MainWindow,  Container, PushButton, Field, CheckBox, ObjectCombo, Form, DockArea, DockItem, Slider,
    StatusBar, StatusItem, Label, DockPane, MultilineField, Window, ToolBar, Action, ActionGroup, FileDialogEx, GroupBox
)

#from enaml_Base import AutoBaseCont
#template BaseTemp(BaseView):
#    AutoBaseCont:
#        pass

from enaml_Plotter import PlotWrap, PlotItem, show_item as show_plot, PlotArea #PlotAreaContainer as PlotContainer
from enaml_Filer import SaveWrap, ReadWrap, ReadSaveWrap
from taref.core.TA_Fundamentals import cap_case
from atom.api import Atom, Str, Instance, Event


from enaml.widgets.api import Container, Field

enamldef ECont(Container):
    padding = 0
    alias lp
    ScrollArea: sa:
        alias lp
        Container:
            padding=0
            Looper: lp:
                iterable << polygon.verts
                Container: lpc:
                    #attr nlen=len(polylist[index].verts)-1
                    padding=0
                    constraints = [hbox(ff1, ff2, insert_vert, pop_vert)]
                    FloatField: ff1:
                        value:=loop_item.x #instr.polylist[ind.value].verts[0].x
                    FloatField: ff2:
                        value:=loop_item.y #instr.polylist[ind.value].verts[0].y
                    PushButton: insert_vert:
                        text="Insert"
                        clicked::
                            polygon.verts.insert(loop_index, inner_type()) #pass #mydata.insert()
                            lp.refresh_items()#ebc.length+=1
                        #visible << model.get_tag(name, "full_interface", False)
                    PushButton: pop_vert:
                        text="Remove"
                        clicked:: 
                            #print loop_index
                            polygon.verts.pop(loop_index)
                            lp.refresh_items() #ind.value#+=1
                            #ind.value-=1#ebc.request_relayout()
                
                        #visible << model.get_tag(name, "full_interface", False)
                        #enabled << lpc.nlen>0

enamldef EContWrap(ECont):
    attr polygon
#    attr index


def getinc(inclist, index): 
    if inclist==[]:
        return inclist
    else:
        return [EContWrap(polygon=inclist[index])]

enamldef EBCont(Container): ebc:
    #attr polylist=polyer.polylist
    #attr length max(0, len(polyer.polylist)-1)
    #attr inclist=[]
    #attr inlen=0
    #event rdr
    #rdr :: ebc.request_relayout()
    padding=0
    constraints = [hbox( ind, val, insert_btn, pop_btn, spacer), align("top", ind, val, insert_btn, pop_btn)]
    SpinBox: ind:
        minimum=0
        maximum << max(0, len(polyer.polylist)-1)#ebc.length #max(0, len(polylist)-1)
    Container: val:
        #ScrollArea:
            #Container:
            Include: inc:
                objects << getinc(polyer.polylist, ind.value)
                #Looper:
                    #iterable << polylist
                    #EContWrap:
                    #    polygon << loop_item
                    
    PushButton: insert_btn:
        text="Insert"
        clicked::
            #if len(polylist)==0:
            #    intype=inside_type() #if inside_type is not specified for an empty array, this will generate an error
            #else:
            polyer.polylist.insert(ind.value, inside_type()) #pass #mydata.insert()
            #ebc.length+=1
#            inc.objects=getinc(polylist, ind.value)

        #visible << model.get_tag(name, "full_interface", False)
    PushButton: pop_btn:
        text="Remove"
        clicked:: 
            polyer.polylist.pop(ind.value)
            #ebc.length-=1
 #           inc.objects=getinc(polylist, ind.value)
            #ind.value+=1
            #ind.value-=1
            #ebc.request_relayout()
            #lp.refresh_items() 
        #visible << model.get_tag(name, "full_interface", False)
        enabled << max(0, len(polyer.polylist)-1)>0
    #PushButton: plot_btn:
    #    text="Plot"
    #    clicked ::
            #instr.plot()
            #print bossarea.dock_items()[0].name
   #         show_plot(plotr.name+'plot', bossarea, target=bossarea.dock_items()[0].name, ItemType=PlotItem, position="right")
            # target=None, ItemType=DockItem, position='left', OP=InsertItem, **kwargs):
    #PlotWrap: pw:
    #    plotr=instr.boss.plot
#template EBTemp(InstrView: "EBL"): #Dummy template demonstrating custom Instrument layouts using the view variable
#    EBCont:
#        pass

#enamldef EBLToolBar(ToolBar):
#    dock_area='left'
#    Action:
#        text="Log"
#        triggered::
#            logpane.show()
#        tool_tip = "Show log"
#    Action:
#        text="Save"
#        triggered::
#            savepane.show()
#        tool_tip = "Show save pane"
##    Action:
##        text="Read"
##        triggered::
##            if savepane.visible:
##                savepane.hide()
##            readpane.show()
#            #print dir(savepane) #boss.run #readpane.show()
##        tool_tip = "Show read pane"
#    Action:
#        text = "Plot"
#        triggered:: show_plot(bossarea, boss.plot) #show_pane(dyn_pages, 'Plot')
#        tool_tip = "Show plot"
#    Action:
#        separator=True
#    Action:
#        text = "draw polygon"
#        triggered :: eblitemin.plot()
#    Action:
#        separator=True
#    Action: run:
#        text = "Run"
#        triggered :: boss.run_measurement()
#    Action:
#        separator=True
#    Action:
#        separator=True
#
#    #Action:
#    #    text = "Instruments"
#    #    triggered:: show_all_instruments(bossarea, boss)#show_all_instruments(dyn_pages, boss)
#    #    tool_tip = "Show all instruments"
#    #Action:
#    #    separator=True
#    #Looper: loopy:
#    #    iterable := boss.bases
#    #    Action:
#    #        text = loop_item.name
#    #        tool_tip = "Show instrument: {0}".format(loop_item.name)
#    #        triggered:: show_instrument(bossarea, loop_item)#show_instrument(dyn_pages, loop_item)

#enamldef EBLItemMain(MainWindow): main:
#    attr eblitemin
#    attr boss
#    title=eblitemin.name
#    EBLToolBar:
#        pass
##    alias readpane
##    ReadSavePane: readpane:
##        visible = False
#    alias savepane
#    SavePane: savepane:
#        visible = False
#    alias logpane
#    LogPane: logpane:
#        pass
#    alias bossarea
#    Container: mycont:
#        constraints = [mycont.width==bossarea.width, mycont.height==bossarea.height]
#        alias bossarea
#        DockArea: bossarea:
#            layout = HSplitLayout(TabLayout(eblitemin.name), TabLayout("plot1"))
#            BaseItem:
#                instr=eblitemin
#            PlotItem:
#                plotr=boss.plot

enamldef EBContWrap(EBCont):
    attr polyer
    attr inside_type=float
    attr inner_type=float

#from enaml_Boss import BossMain, show_general_item#, SavePane, LogPane, PlotPane, BossToolBar

enamldef EBMain(MainWindow):
    attr polyer
    attr inside_type
    attr inner_type    
    EBCont:
        pass

enamldef EBItem(DockItem):
    attr instr
    name = instr.name
    title = cap_case(instr.name)
    EBCont:
        pass
    #DynamicTemplate:  #use of dynamic template allows custom instrument layouts if defined in enaml
    #    base = EBTemp
    #    args = (instr.view,)

#class EBLMain(BossMain):
#    def show_base(self, area, base):
#        if base!=None:
#            show_general_item(area, base, ItemType=EBItem, target_items=base.boss.bases, instr=base)

#enamldef EBMain(EBLMain):#MainWindow): main:
#    attr plotr=boss.plot
    #PlotArea:
    #    pass
#    pass
#    attr boss
#    attr base: None
#    title="Base"
#    initial_size=(1200,800)
#    #alias readpane
#    #ReadSavePane: readpane:
#    #    visible = True #False
#    alias savepane
#    SavePane: savepane:
#        visible = False
#    alias logpane
#    LogPane: logpane:
#        pass
#    alias plotpane
#    PlotPane: plotpane:
#        pass
#
#    #title="Boss"
##    attr path : unicode=u''
##    attr counter = 0
##    initial_size=(500, 500)
##    constraints = [ height == 500]
##    StatusBar: statbar:
##        StatusItem:
##            Label:
##                text = 'Status:'
##        StatusItem:
##            Label:
##                text = 'other stuff really happened:'
##
#    BossToolBar:
#        pass
#    alias bossarea
#    Container: mycont:
#        constraints = [mycont.width==bossarea.width, mycont.height==bossarea.height]
#        alias bossarea
#        DockArea: bossarea:
#            activated :: main.show_base(bossarea, base)