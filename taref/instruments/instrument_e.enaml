# -*- coding: utf-8 -*-
"""
Created on Thu May  7 11:20:09 2015

@author: thomasaref
"""
from enaml.widgets.api import Form, ToolBar, Action, VGroup, PushButton, GroupBox, ScrollArea, Container, Field, Label, ProgressBar, DockPane, Notebook, Page
from enaml.core.api import Looper, Conditional
from enaml.layout.api import spacer
from taref.core.agent_e import CoreView
from taref.core.instrview_e import InstrView, InstrHolder, DynVar
from taref.core.log import log_debug
from taref.core.fundcore_e import AgentWindow, aHGroup
from taref.core.atom_extension import get_run_params, get_tag, set_tag, get_main_params

enamldef InstrVar(DynVar):
    Conditional:
        condition = get_tag(vmodel, vname, "sub", False) and get_tag(vmodel, vname, "do") != None
        PushButton:
                text = "Do"
                checkable = True
                checked << get_tag(vmodel, vname, "do", False)
                clicked :: set_tag(vmodel, vname, do=self.checked)
    Conditional:
        condition<<get_tag(vmodel, vname, "set_cmd") != None and not get_tag(vmodel, vname, "send_now", vmodel.send_now)
        VGroup:
            PushButton:
                text = "Send"
                clicked :: vmodel.send(**{vname:vvalue})
                enabled<<not vmodel.busy
            PushButton:
                text = "Now"
                checkable = True
                checked << get_tag(vmodel, vname, "send_now", vmodel.send_now)
                clicked :: set_tag(vmodel, vname, send_now=self.checked)
    Conditional:
        condition=get_tag(vmodel, vname, "set_cmd") != None
        GroupBox: 
            attr vmodel=parent.vmodel
            visible = get_run_params(get_tag(vmodel, vname, 'set_cmd'))[1:] != []
            title = "Send parameters:"
            Looper:
                iterable=get_run_params(get_tag(vmodel, vname, "set_cmd"))[1:]
                DynVar:
                    vname=loop_item

    Conditional:
        condition=get_tag(vmodel, vname, "get_cmd") != None
        VGroup:
            PushButton:
                text = "Receive"
                clicked :: vmodel.receive(vname)
                enabled<<not vmodel.busy
        GroupBox: 
            attr vmodel=parent.vmodel
            visible = get_run_params(get_tag(vmodel, vname, 'get_cmd'))[1:] != []
            title = "Receive parameters:"
            Looper:
                iterable=get_run_params(get_tag(vmodel, vname, "get_cmd"))[1:]
                DynVar:
                    vname=loop_item
                    
enamldef InstrLooper(Looper):
    attr vmodel=parent.vmodel
    iterable=get_main_params(vmodel)
    InstrVar:
        vname=loop_item

enamldef BootCloseToolBar(ToolBar):
    dock_area="right"
    Action:
        text="Boot All"
        triggered::chief_cls.boot_all()
        tool_tip = "Boot all instruments"
    Action:
        separator=True
    Action:
        text="Close All"
        triggered::chief_cls.close_all()
        tool_tip = "Close all instruments"
    Action:
        separator=True
    Action:
        text="Abort All"
        triggered::chief_cls.abort_all()
        tool_tip = "Abort all processes"


enamldef ControlView(CoreView):
    BootCloseToolBar:
        pass
    VGroup:
        GroupBox:
            Looper:
                iterable=chief_cls.run_func_dict.keys()
                PushButton:
                    text = loop_item
                    clicked :: chief_cls.run_func_dict[loop_item]()
        PushButton:
            text = "Run Measurement"
            clicked :: chief_cls.run_measurement()

enamldef BootExt(aHGroup):
    """Boot function display"""
    trailing_spacer=None #spacer
    PushButton: pb:
        text << 'Boot' if instr.status=="Closed" else 'Active'
        clicked ::
            instr.boot()
            self.checked=instr.status=="Active"
        checkable=True
        checked << instr.status=="Active"
        enabled << not instr.busy
    GroupBox: gb:
        title = "Boot parameters:"
        attr vmodel=instr
        Looper:
            iterable=get_run_params(instr.booter)
            InstrVar:
                vname=loop_item

enamldef CloseExt(aHGroup):
    """Close function display"""
    trailing_spacer=None #spacer
    PushButton: pb:
        text << 'Close' if instr.status=="Active" else 'Closed'
        clicked :: instr.close()
        checkable=True
        checked << instr.status=="Closed"
    GroupBox: gb:
        title = "Close parameters:"
        attr vmodel=instr
        Looper:
            iterable=get_run_params(instr.closer)
            InstrVar:
                vname=loop_item

enamldef StatusExt(aHGroup):
    """Top status display"""
    trailing_spacer=None

    PushButton:
        text << instr.status
        checkable=True
        checked << instr.status=="Active"
        clicked ::
            if instr.status=="Active":
                instr.close()
            else:
                instr.boot()
        enabled<< not instr.busy or instr.status=="Active"

    PushButton: busy_b:
        text = "Busy"
        checkable=True
        checked << instr.busy
        clicked:: busy_b.checked=instr.busy
        enabled<<instr.busy

    ProgressBar:
        value<<instr.progress
        text_visible=True

    PushButton: abort_b:
        text = "Abort"
        checkable=True
        clicked ::
            instr.abort=True
            if not instr.busy:
                instr.abort=False
        checked << instr.abort
        enabled << instr.busy

    PushButton:
        text << {True : "SEND ON CHANGE", False : "USE SEND BUTTON"}[instr.send_now]
        checkable=True
        checked << instr.send_now
        clicked ::
            instr.send_now=self.checked

enamldef TestExt(aHGroup):
    """test function display"""
    trailing_spacer=spacer
    PushButton:
        text = "Run"
        clicked :: instr.command_response()
    GroupBox: gb:
            title = "Parameters:"
            attr vmodel=instr
            Looper:
                iterable=["command", "resp_delay", "response"]
                InstrVar:
                    vname=loop_item

enamldef InstrumentNotebook(Notebook):
    selected_tab="instrument"
    #tab_style = 'preferences'
    tabs_closable=False
    Page:
        name="bootclose"
        title="Boot/Close"
        VGroup:
            #constraints = [be.width>=500]
            BootExt: be:
                pass
            CloseExt:
                pass
    Page:
        name="instrument"
        title="Instrument"
        VGroup:
            ScrollArea:
                InstrHolder:
                    vmodel=instr
    Conditional:
        condition = hasattr(instr, "command_response")
        Page:
            name="test"
            title="Test"
            VGroup:
                TestExt:
                    pass

#enamldef GPIB_InstrumentNotebook(InstrumentNotebook):
#    Page:
#        name="test"
#        title="Test"
#        VGroup:
#            TestExt:
#                pass

enamldef InstrumentView(AgentWindow):
    """default view for an agent based on dynamic templating"""
    attr instr
    VGroup:
        StatusExt:
            pass
        InstrumentNotebook:
            pass

#enamldef GPIB_InstrumentView(AgentWindow):
#    """default view for an agent based on dynamic templating"""
#    attr instr
#    VGroup:
#        StatusExt:
#            pass
#        GPIB_InstrumentNotebook:
#            pass