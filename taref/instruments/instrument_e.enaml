# -*- coding: utf-8 -*-
"""
Created on Thu May  7 11:20:09 2015

@author: thomasaref
"""

from enaml.widgets.api import ToolBar, Action, VGroup, PushButton, GroupBox, ScrollArea, Container, Field, Label
from enaml.core.api import Looper, Conditional
from enaml.layout.api import spacer
from taref.core.agent_e import CoreView
from taref.core.instrview_e import InstrView, InstrHolder, InstrVar
from taref.core.log import log_debug
from taref.core.fundcore_e import AgentWindow, aHGroup
from taref.core.atom_extension import get_run_params
##This code between the bars is just to demonstrate how to include a custom enaml template
###------------------------------
#from enaml_TestTemp import InstrAltCont
#template InstrTemp(InstrView: "Field"): #Dummy template demonstrating custom Instrument layouts using the view variable
#    InstrAltCont:
#        pass
###---------------------------------
#
##The auto enaml layout for Instruments
#from enaml_Base import AutoInstrCont
#template InstrTemp(InstrView):
#    AutoInstrCont:
#        #minimum_size=1000
#        pass

enamldef BootCloseToolBar(ToolBar):
    dock_area="right"
    Action:
        text="Boot All"
        triggered::chief_cls.boot_all()
        tool_tip = "Boot all instruments"
    Action:
        separator=True
    Action:
        text="Close All"
        triggered::chief_cls.close_all()
        tool_tip = "Close all instruments"


enamldef ControlView(CoreView):
    BootCloseToolBar:
        pass
    VGroup:
        GroupBox:
            Looper:
                iterable=chief_cls.run_func_dict.keys()
                PushButton:
                    text = loop_item
                    clicked :: chief_cls.run_func_dict[loop_item]()
        PushButton:
            text = "Run Measurement"
            clicked :: chief_cls.run_measurement()

enamldef BootExt(aHGroup):
    """Boot function display"""
    trailing_spacer=spacer
    PushButton: pb:
        text = 'Boot'
        clicked :: instr.boot()
    Conditional:
        condition = instr.boot_name!=""
        Conditional:
            condition = get_run_params(getattr(instr, instr.boot_name))!=[]
            GroupBox: gb:
                title = "Boot parameters:"
                attr vmodel=instr
                Looper:
                    iterable=get_run_params(getattr(instr, instr.boot_name))
                    InstrVar:
                        vname=loop_item

enamldef CloseExt(aHGroup):
    """Close function display"""
    trailing_spacer=spacer
    PushButton: pb:
        text = 'Close'
        clicked :: instr.close()
    Conditional:
        condition = instr.close_name!=""
        Conditional:
            condition = get_run_params(getattr(instr, instr.close_name))!=[]
            GroupBox: gb:
                title = "Close parameters:"
                attr vmodel=instr
                Looper:
                    iterable=get_run_params(getattr(instr, instr.close_name))
                    InstrVar:
                        vname=loop_item

enamldef StatusExt(aHGroup):
    """Close function display"""
    trailing_spacer=spacer
    GroupBox:
        title = "Boot/Close"
        flat=True
        PushButton:
            text << instr.status
            checkable=True
            checked << instr.status=="Active"
            clicked ::
                if instr.status=="Active":
                    instr.close()
                else:
                    instr.boot()
    Conditional:
        condition = instr.boot_name!=""
        Conditional:
            condition = get_run_params(getattr(instr, instr.boot_name))!=[]
            GroupBox:
                title = "Boot parameters:"
                attr vmodel=instr
                Looper:
                    iterable=get_run_params(getattr(instr, instr.boot_name))
                    InstrVar:
                        vname=loop_item
    Conditional:
        condition = instr.close_name!=""
        Conditional:
            condition = get_run_params(getattr(instr, instr.close_name))!=[]
            GroupBox:
                title = "Close parameters:"
                attr vmodel=instr
                Looper:
                    iterable=get_run_params(getattr(instr, instr.close_name))
                    InstrVar:
                        vname=loop_item
    VGroup:
        Label:
            text="Automatic Send On Change"
        PushButton:
                text << {True : "ON", False : "OFF"}[instr.send_now]
                checkable=True
                checked << instr.send_now
                clicked ::
                    instr.send_now=self.checked
enamldef InstrumentView(AgentWindow):
    """default view for an agent based on dynamic templating"""
    attr instr
    activated :: print "yow"
    VGroup:
        GroupBox:
            VGroup:
                StatusExt:
                    pass

        ScrollArea:
            InstrHolder:
                vmodel=instr

#enamldef InstrumentToolBar(ToolBar):
#    dock_area='left'
#    Action:
#        text="Log"
#        triggered::
#            logpane.show()
#        tool_tip = "Show log"
#    Action:
#        text="Save"
#        triggered::
#            savepane.show()
#        tool_tip = "Show save pane"
##    Action:
##        text="Read"
##        triggered::
##            if savepane.visible:
##                savepane.hide()
##            readpane.show()
#            #print dir(savepane) #boss.run #readpane.show()
##        tool_tip = "Show read pane"
#    Action:
#        text = "Plot"
#        triggered:: show_plot(bossarea, boss.plot) #show_pane(dyn_pages, 'Plot')
#        tool_tip = "Show plot"
#    Action:
#        separator=True
#    Action:
#        separator=True
#    Action: prepare:
#        text = "Prepare"
#        triggered :: boss.prepare()
#    Action: run:
#        text = "Run"
#        triggered :: boss.run()
#    Action: finish:
#        text = "Finish"
#        triggered :: boss.finish()
#    Action:
#        separator=True
#    Action:
#        separator=True
#    Action: run_measurement:
#        text = "Run Full"
#        triggered :: boss.run_measurement()
#    Action:
#        separator=True
#    Action:
#        separator=True
#    Action: abort:
#        text = "Abort"
#        triggered :: boss.wants_abort=True
#    Action:
#        separator=True
#    Action:
#        separator=True
#    Action:
#        text = "Boot All"
#        triggered::boss.boot_all()
#        tool_tip = "Boots all instruments"
#    Action:
#        text = "Close All"
#        triggered::boss.close_all()
#        tool_tip = "Closes all instruments"
#    Action:
#        separator=True
#    Action:
#        separator=True
#    Action:
#        text = "Instruments"
#        triggered:: show_all_instruments(bossarea, boss)#show_all_instruments(dyn_pages, boss)
#        tool_tip = "Show all instruments"
#    Action:
#        separator=True
#    Looper: loopy:
#        iterable := boss.bases
#        Action:
#            text = loop_item.name
#            tool_tip = "Show instrument: {0}".format(loop_item.name)
#            triggered:: show_instrument(bossarea, loop_item)#show_instrument(dyn_pages, loop_item)

#enamldef InstrumentItem(DockItem):
#    attr instr
#    name = instr.name
#    title = cap_case(instr.name)
#    DynamicTemplate:  #use of dynamic template allows custom instrument layouts if defined in enaml
#        base = InstrTemp
#        args = (instr.view,)
#
#enamldef InstrMain(MainWindow): main:
#    attr instrin
#    attr boss
#    title=instrin.name
#    BossToolBar:
#        pass
#    alias readpane
#    ReadSavePane: readpane:
#        visible = False
#    alias savepane
#    SavePane: savepane:
#        visible = False
#    alias logpane
#    LogPane: logpane:
#        pass
#    alias bossarea
#    Container: mycont:
#        constraints = [mycont.width==bossarea.width, mycont.height==bossarea.height]
#        alias bossarea
#        DockArea: bossarea:
#            layout = TabLayout(instrin.name)
#            InstrumentItem: ii:
#                instr=instrin
