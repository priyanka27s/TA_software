# -*- coding: utf-8 -*-
"""
Created on Sun Jun 28 22:14:19 2015

@author: thomasaref

Collection of all member templates. When trying to separate them into other files, it seems to create problems
"""

from atom.api import observe, Coerced, Atom, Callable, Tuple, Typed, Dict, List, Float, Int, Unicode, Enum, Bool, Str, ContainerList, Range, FloatRange, Instance, Event
from enaml.widgets.api import (RawWidget, Container, Field, Form, SpinBox, GroupBox, Label, Window,
                               ProgressBar, PushButton, CheckBox, MultilineField, ScrollArea, ObjectCombo, Slider)

from enaml.layout.api import hbox, vbox, spacer, align
from enaml.core.api import DynamicTemplate, Looper, d_, Include, Conditional
from enaml.stdlib.fields import FloatField, IntField
from enaml.application import deferred_call

from Atom_Read_File import Read_File
from Atom_Save_File import Save_File
from enaml_Filer import ReadWrap, SaveWrap

from EBL_enaml import EBContWrap
from EBL_Polyer import Polyer
from LOG_functions import log_debug
#from e_Instrument import BootClose
from Atom_Instrument import Instrument
from a_Base import get_tag, get_type, Base, get_main_params#, get_map
from e_FundView import IntSpinBox
#########################################################
#User Typed Specializations

template TypedView(instrin, name, baseType: Read_File):
    """ Displays a read file interface"""
    ReadWrap:
        filer:=getattr(instrin, name)

template TypedView(base, name, baseType: Save_File):
    """Displays a save file interface"""
    SaveWrap:
        filer:=getattr(base, name)

template TypedView(base, name, baseType: Polyer):
    """Displays a polyer polygon list interface. very ineffecient. too many notifications"""
    EBContWrap:
        polyer:=getattr(base, name)

##########################################################        
#Variable Views, e.g. chooses between Base and Instrument
def constraints_gen(base, name, lbl, val, unt, contents_width, contents_top, contents_left):
    """constraint generator for VarView Base, allows tagged width control"""
    if type(get_tag(base, name, "width", 0))!=int:
        return [hbox(lbl, val, unt)]
    else:
        return [hbox(lbl, val, unt, spacer), val.width>=get_tag(base, name, 'width', contents_width/5),
                align('bottom', val, unt), align('bottom', lbl, val)]
                 #contents_top == val.top, contents_left == lbl.left,]

template VarView(instrin, name, baseType):
    """view of a parameter in a base with identifying label and unit"""
    GroupBox:
        flat = True
        padding=0
        constraints = constraints_gen(instrin, name, lbl, val, unt, contents_width, contents_top, contents_left) #[hbox( lbl, val, unt),#,
        #               align('top', val, unt), align('top', lbl, val),
        #                  align('left', gbcontents, 80, val) | 'medium']#, width == contents_width, height==contents_height]
                        #contents_top == lbl.top, contents_left == lbl.left]#, contents_right == set_params.right,
#                         (lbl.bottom == contents_bottom) | 'medium']
        Label: lbl:
            text = get_tag(instrin, name, 'label', name)
        Container: val:
            padding = 0
            DynamicTemplate:
                base = TypedView
                args = (instrin, name, baseType)
        Label: unt:
            text = get_tag(instrin, name, 'unit', "no unit")
            visible = get_tag(instrin, name, 'unit') is not None

template VarView(base, name, InstrType: Instrument):
    """view of a parameter in an instrument, with send and receive functionality added. needs some touch up."""
    GroupBox: contents:
        flat = True
        padding=0
        constraints = [
                        hbox( lbl, val, unt, snd_now, snd, rec, set_params, get_params, spacer),#,
                       align('top', val, rec), align('top', val, unt), align('top', lbl, val),
                         align('top', val, set_params), align('top', set_params, get_params),
                         align('left', contents, 280, rec) | 'medium', align('left', contents, 80, val) | 'medium']
        #                width == contents_width, height==contents_height]
                        #contents_top == lbl.top, contents_left == lbl.left]#, contents_right == set_params.right,
#                         (lbl.bottom == contents_bottom) | 'medium']
        Label: lbl:
            text = instr.get_tag(name, 'label', name)
        Container: val:
            padding = 0
            DynamicTemplate: dyn:
                base = TypedView
                args = (name, instr, instr.get_type(name))
        Label: unt:
            text = instr.get_tag(name, 'unit', "")
            visible = instr.get_tag(name, 'unit')!=None
        GroupBox: get_params:
            padding = 0
            visible = instr.get_run_params(name, 'get_cmd')!=[]
            title = instr.get_tag(name, 'label', name)+" get parameters:"
            Looper: get_loop:
                    iterable << instr.get_run_params(name, 'get_cmd', notself=True)
                    DynamicTemplate:
                        base=VarTemp #text = '{0} {1}'.format(loop_index, loop_item)
                        args=(loop_item, instr, type(instr))

        GroupBox: set_params:
            #hug_height='strong'
            padding = 0
            visible = instr.get_run_params(name, 'set_cmd')!=[]
            title = instr.get_tag(name, 'label', name)+" set parameters:"
            Looper: set_loop:
                    iterable << instr.get_run_params(name, 'set_cmd', notself=True)
                    DynamicTemplate:
                        base=VarTemp #text = '{0} {1}'.format(loop_index, loop_item)
                        args=(loop_item, instr, type(instr))

        CheckBox: snd_now:
            text = 'Send on change'
            checked = instr.get_tag(name, 'send_now', instr.send_now)
            toggled :: instr.set_tag(name, send_now=snd_now.checked)
            visible << (instr.get_tag(name, 'get_cmd')!=None or instr.get_tag(name, 'set_cmd')!=None) and instr.get_tag(name, 'full_interface', instr.full_interface)
        PushButton: snd:
            text = 'Send'
            clicked :: instr.send(name) #sender(var, val)
            enabled << instr.get_tag(name, 'set_cmd')!=None and not instr.busy
            visible << (instr.get_tag(name, 'get_cmd')!=None or instr.get_tag(name, 'set_cmd')!=None) and instr.get_tag(name, 'full_interface', instr.full_interface)
        PushButton: rec:
            text = 'Receive'
            clicked :: instr.receive(name) #do_it_if_needed(var, "receive") #receive()
            enabled << instr.get_tag(name, 'get_cmd')!=None and not instr.busy
            visible = instr.get_tag(name,'get_cmd')!=None or instr.get_tag(name, 'set_cmd')!=None

###################################################
#BaseView picks between the VarViews
def form_spec(instr):
    main_params=get_main_params(instr)
    return tuple([(instr, name, get_type(instr, name)) for name in main_params])

template BaseView(instrin, baseType):
    Container:
        padding = 0
        Looper:
            iterable<<form_spec(instrin)
            DynamicTemplate:
                base = VarView
                args = loop_item

####################################################
#Fundamental typed and list views
template TypedView(base, name, baseType):
    """ This default specialization displays read-only text for the value."""
    Field:
        read_only = True
        text << unicode(getattr(base, name))

template ListView(base, name, baseType, Ind):
    """ This default list specialization displays read-only text for the value."""
    Field:
        read_only = True
        text << unicode(getattr(base, name)[Ind])
        

template TypedView(instrin, name, baseType: Base):
    """specialization for type Base"""
    BaseView(getattr(instrin, name), baseType):
        pass

template ListView(instrin, name, baseType: Base, Ind):
    """list specialization for type Base"""
    BaseView(getattr(instrin, name)[Ind], baseType):
        pass

template TypedView(base, name, InstrType: Atom):
    """specialization for type Atom (too broad)???"""
    TypedView(base, name, Base): pass

template ListView(base, name, InstrType: Atom, Ind):
    """list specialization for type Atom (too broad)???"""
    ListView(base, name, Base, Ind): pass

template TypedView(base, name, baseType: Typed):
    """interface for a Typed member."""
    TypedView(base, name, type(getattr(base, name))): pass

template ListView(base, name, baseType: Typed, Ind):
    """list interface for a Typed member."""
    ListView(base, name, type(getattr(base, name)), Ind): pass

template TypedView(base, name, baseType: Instance):
    """specialization for type Instance"""
    TypedView(base, name, Typed): pass

template ListView(base, name, baseType: Instance, Ind):
    """list specialization for type Instance"""
    ListView(base, name, Typed, Ind): pass

template TypedView(base, name, baseType: Coerced):
    """specialization for Coerced"""
    TypedView(base, name, Typed): pass

template ListView(base, name, baseType: Coerced, Ind):
    """list specialization for Coerced"""
    ListView(base, name, Typed, Ind): pass

template TypedView(Instr, Name, AttrType: Int):
    """ A template for Int members using a spin box"""
    SpinBox:
        value := getattr(Instr, Name)
        minimum=int(get_tag(Instr, Name, 'low', -2147483648))
        maximum=int(get_tag(Instr, Name, 'high', 2147483647))        

template TypedView(Instr, Name, AttrType: int):
    """a specialization for ints"""
    TypedView(Instr, Name, Int): pass

template ListView(Instr, Name, AttrType: Int, Index):
    """ A list template for Int members using a spin box"""
    SpinBox:
        value := getattr(Instr, Name)[Index]
        minimum=int(get_tag(Instr, Name, 'low', -2147483648))
        maximum=int(get_tag(Instr, Name, 'high', 2147483647))       

template ListView(Instr, Name, AttrType: int, Index):
    """A list specialization for ints"""
    ListView(Instr, Name, Int, Index): pass

template TypedView(base, name, baseType: Float):
    """specialization for Float members"""
    FloatField:
        value :=  getattr(base, name)
        minimum=get_tag(base, name, 'low')
        maximum=get_tag(base, name, 'high')

template TypedView(base, name, baseType: float):
    """specialization for floats"""
    TypedView(base, name, Float): pass

template ListView(base, name, baseType: Float, Index):
    """ list specialization for Float members"""
    FloatField:
        value :=  getattr(base, name)[Index.value]
        minimum=get_tag(base, name, 'low')
        maximum=get_tag(base, name, 'high')

template ListView(base, name, baseType: float, Index):
    """list specialization for floats"""
    ListView(base, name, Float, Index): pass

template TypedView(Instr, Name, AttrType: Str):
    """ A template for Str using a either a MultilineField or a Field"""
    Conditional:
        condition=get_tag(Instr, Name, "spec")=="multiline"
        MultilineField:
            text := getattr(Instr, Name)
    Conditional:
        condition=get_tag(Instr, Name, "spec")!="multiline"
        Field:
            text := getattr(base, name)

template TypedView(base, name, baseType: basestring):
    TypedView(base, name, Str): pass

template TypedView(base, name, baseType: Unicode):
    """A template for Unicode using a field"""
    TypedView(base, name, Str): pass

template ListView(Instr, Name, AttrType: Str, Index):
    """ A template for Str using a either a MultilineField or a Field"""
    Conditional:
        condition=get_tag(Instr, Name, "spec")=="multiline"
        MultilineField:
            text := getattr(Instr, Name)[Index]
    Conditional:
        condition=get_tag(Instr, Name, "spec")!="multiline"
        Field:
            text := getattr(base, name)[Index]

template ListView(Instr, Name, AttrType: Unicode, Index):
    """ A template for Str using a either a MultilineField or a Field"""
    ListView(Instr, Name, Str, Index): pass

template ListView(Instr, Name, AttrType: basestring, Index):
    """ A template for Str using a either a MultilineField or a Field"""
    ListView(Instr, Name, Str, Index): pass

template TypedView(base, name, baseType: Bool):
    """ A template specialization for Bool members using CheckBox"""
    CheckBox:
        checked := getattr(base, name)

template TypedView(base, name, baseType: bool):
    TypedView(base, name, Bool): pass

template ListView(instrin, name, baseType: Bool, Ind):
    """ A template specialization for Bool members using CheckBox"""
    CheckBox:
        checked := getattr(instrin, name)[Ind]

template ListView(instrin, name, baseType: bool, Ind):
    """ A template specialization for Bool members using CheckBox"""
    ListView(instrin, name, Bool, Ind): pass

template TypedView(base, name, baseType: Range):
    """ A template for Range members"""
    Container:
        constraints=[hbox(sel, min_lbl, sel_slider, max_lbl)]
        SpinBox: sel:
            value:=getattr(base, name)
            minimum = sel_slider.minimum
            maximum = sel_slider.maximum
        Slider: sel_slider:
            minimum = base.get_member(name).validate_mode[1][0]
            maximum = base.get_member(name).validate_mode[1][1]
            value :=getattr(base, name)
            tracking = False
        Label: min_lbl:
                text << str(sel_slider.minimum)
        Label: max_lbl:
            text << str(sel_slider.maximum)

#template ValView(base, name, baseType: FloatRange):
#    """ A form control template specialization for Float members"""
#    Container:
#        constraints=[hbox(sel, min_lbl, sel_slider, max_lbl)]
#        FloatField: sel:
#            value:=getattr(base, name)
#            minimum = ft.minimum
#            maximum = ft.maximum
#        Slider: sel_slider:
#            tracking = False
#            FloatTransform: ft:
#                minimum=base.get_tag(name, 'low')
#                maximum=base.get_tag(name, 'high')
#                value :=getattr(base, name)
#                precision=base.get_tag(name, 'precision', 100)
#        Label: min_lbl:
#                text << str(ft.minimum)
#        Label: max_lbl:
#            text << str(ft.maximum)


def run_params(base, name):
    try:
        return getattr(base, name).run_params
    except AttributeError, e:
        log_debug("AttributeError: {}".format(e))
        return []

template TypedView(instr, name, baseType: Callable):
    """A template specialization for a Callable using a PushButton"""
    Container:
        padding = 0
        constraints = [hbox(pb1, gb1 ,pb2), align('top', pb1, gb1, pb2)]
        PushButton: pb1:
            text = 'Run'
            clicked ::
                try:
                    getattr(instr, name)(instr) #do_it_if_needed(var, "receive") #receive()
                except TypeError:
                    getattr(instr, name)()
            enabled << not instr.boss.busy
        GroupBox: gb1:
            padding = 0
            visible = run_params(instr, name)!=[]
            title = get_tag(instr, name, 'label', name)+" parameters:"
            Looper: get_loop:
                    iterable << run_params(instr, name)
                    DynamicTemplate:
                        base=VarView
                        args=(instr, loop_item, get_type(instr, loop_item))
        PushButton: pb2:
            text = 'Abort'
            clicked ::
                instr.boss.abort=True
            enabled <<  instr.boss.busy
            
template TypedView(instrin, name, baseType: Enum):
    """ A form control template specialization for Enum members using ObjectCombo."""
    Container:
        padding = 0
        constraints = [ hbox(val, enm_val)]
        ObjectCombo: val:
            items = list(instrin.get_member(name).items)
            selected := getattr(instrin, name)
        Container: enm_val:
            padding = 0
            Conditional:
                condition = get_tag(instrin, name, "map_type")=="attribute"
                DynamicTemplate: 
                    base = VarView
                    args << (instrin, val.selected, get_type(instrin, val.selected))
            Conditional: 
                condition = get_tag(instrin, name, "map_type")!="attribute"
                Label: 
                    text <<  unicode(instrin.get_map(name, val.selected))                

template TypedView(instrin, name, baseType: ContainerList):
    Container: cc:
        padding=0
        constraints = [hbox(ind, val, insert_btn, pop_btn), ind.width==100]
        SpinBox: ind:
            minimum=0
            maximum = max(0, len(getattr(instrin, name))-1)
        Container: val:
            padding = 0
            alias dyn
            DynamicTemplate: dyn:
                base = ListView
                args << (instrin, name, type(getattr(instrin, name)[ind.value]), ind.value) #, get_type(base, name, ind.value))
        PushButton: insert_btn:
            text="Insert"
            clicked::
                if len(getattr(instrin, name))==0:
                    intype=get_tag(instrin, name, 'inside_type')() #if inside_type is not specified for an empty array, this will generate an error
                else:
                    temptype=getattr(instrin, name)[ind.value]
                    if isinstance(temptype, Base):
                        intype=temptype.copy()
                    else:
                        intype=type(temptype)()
                getattr(instrin, name).insert(ind.value+1, intype) #pass #mydata.insert()
                ind.maximum=max(0, len(getattr(instrin, name))-1)
                ind.value+=1
        PushButton: pop_btn:
            text<<"Remove"
            clicked::
                if ind.value==ind.minimum:
                    getattr(instrin, name).pop(ind.value)
                    ind.value+=1 #force update
                    ind.value=ind.minimum
                else:
                    ind.value-=1
                    getattr(instrin, name).pop(ind.value+1)
                ind.maximum=max(0, len(getattr(instrin, name))-1)
            enabled << len(getattr(instrin, name))>0

template TypedView(Instr, Name, baseType: List):
    TypedView(Instr, Name, ContainerList): pass

template TypedView(Instr, Name, baseType: list):
    TypedView(Instr, Name, ContainerList): pass



#####################################
#under development
template ListView(Instr, Name, baseType: List, Index):
    ListView(Instr, Name, ContainerList, Index): pass

template ListView(Instr, Name, baseType: list, Index):
    ListView(Instr, Name, ContainerList, Index): pass


template ListViewOFF(Instr, Name, baseType: ContainerList, Index):
    #when list is called the ListViews access only one deep, not two deep. Solve with recursion?
    Container: 
        padding=0
        constraints = [hbox(ind, val, insert_btn, pop_btn), ind2.width==100]
        SpinBox: ind2:
            minimum=0
            maximum = max(0, len(getattr(Instr, Name)[Index])-1)
        Container: val:
            padding = 0
            alias dyn
            DynamicTemplate: dyn:
                base = ListView
                args << (Instr, Name, type(getattr(Instr, Name)[Index][ind2.value]), ind2.value) #, get_type(base, name, ind.value))
        PushButton: insert_btn:
            text="Insert"
            clicked::
                if len(getattr(Instr, Name)[Index])==0:
                    #if inner_type is not specified for an empty array, this will generate an error
                    #only allows two layers of list for zero length list insert
                    intype=get_tag(Instr, Name, 'inner_type')() 
                else:
                    temptype=getattr(Instr, Name)[Index][ind2.value]
                    if isinstance(temptype, Base):
                        intype=temptype.copy()
                    else:
                        intype=type(temptype)()
                getattr(Instr, Name)[Index].insert(ind2.value+1, intype) #pass #mydata.insert()
                ind2.maximum=max(0, len(getattr(Instr, Name)[Index])-1)
                ind2.value+=1
        PushButton: pop_btn:
            text<<"Remove"
            clicked::
                if ind2.value==ind2.minimum:
                    getattr(Instr, Name)[Index].pop(ind2.value)
                    ind2.value+=1 #force update
                    ind2.value=ind2.minimum
                else:
                    ind2.value-=1
                    getattr(Instr, Name)[Index].pop(ind2.value+1)
                ind2.maximum=max(0, len(getattr(Instr, Name)[Index])-1)
            enabled << len(getattr(Instr, Name)[Index])>0



template TypedView(instrin, name, baseType: tuple):
    PushButton:
        text="tuple" #TypedView(instrin, name, Base):

class fake(object):
    def fff():
        pass

template TypedView(base, name, baseType: type(fake.fff)):
    TypedView(base, name, Callable): pass

